{"file_contents":{"design_guidelines.md":{"content":"# Women's Health Tracker - Design Guidelines\n\n## Design Approach\n**Hybrid System-Based Approach**: Foundation in Material Design with inspiration from leading health tracking platforms (Apple Health, Clue, Oura) to create a trustworthy, data-focused experience with empowering aesthetics for women's wellness.\n\n### Core Design Principles\n- **Data Clarity First**: Health metrics must be instantly readable and actionable\n- **Calm Authority**: Professional, trustworthy aesthetic that empowers without overwhelming\n- **Wellness-Focused**: Supportive color palette and visual language centered on holistic health\n\n## Color Palette\n\n### Light Mode\n- **Primary**: 280 45% 55% (Sophisticated purple - trust, wellness, calm)\n- **Primary Variant**: 280 40% 65% (Lighter accent for hover states)\n- **Background**: 0 0% 98% (Warm off-white)\n- **Surface**: 0 0% 100% (Pure white for cards)\n- **Text Primary**: 240 10% 15% (Deep charcoal)\n- **Text Secondary**: 240 5% 45% (Medium gray)\n- **Success**: 150 60% 45% (Health positive indicators)\n- **Warning**: 35 85% 55% (Attention states)\n- **Chart Colors**: Multi-hue palette (280 45% 55%, 200 70% 50%, 320 50% 60%, 160 55% 50%) for different metric visualization\n\n### Dark Mode\n- **Primary**: 280 50% 65% (Lifted purple for contrast)\n- **Background**: 240 8% 12% (Rich dark base)\n- **Surface**: 240 7% 16% (Elevated dark cards)\n- **Text Primary**: 0 0% 95% (Bright white)\n- **Text Secondary**: 0 0% 70% (Light gray)\n\n## Typography\n\n**Font Stack**: 'Inter' for UI, 'DM Sans' for headings via Google Fonts CDN\n\n- **Headings**: DM Sans, weights 500-700\n  - H1: text-4xl font-semibold (Dashboard title)\n  - H2: text-2xl font-semibold (Section headers)\n  - H3: text-xl font-medium (Card titles)\n- **Body**: Inter, weights 400-600\n  - Primary: text-base font-normal\n  - Data Labels: text-sm font-medium\n  - Metric Values: text-3xl font-semibold (Large health numbers)\n  - Timestamps: text-xs font-normal text-secondary\n\n## Layout System\n\n**Spacing Primitives**: Tailwind units 2, 4, 6, 8, 12, 16, 24 for consistent rhythm\n\n- **Container**: max-w-7xl mx-auto for dashboard content\n- **Card Spacing**: p-6 for standard metric cards, p-8 for featured forecast section\n- **Section Gaps**: space-y-8 between major dashboard sections\n- **Grid System**: grid gap-6 for metric card layouts\n- **Responsive Breakpoints**: Mobile-first with md: and lg: variants\n\n## Component Library\n\n### Navigation\n- **Header**: Fixed top bar with app logo, user profile dropdown, sync status indicator\n- **Layout**: Horizontal navigation (Dashboard, Metrics, Settings) with active state highlighting\n\n### Dashboard Cards\n- **Metric Cards**: White/dark surface with subtle shadow (shadow-sm), rounded-xl corners\n  - Icon + Label + Large Value + Trend indicator (up/down arrow with percentage)\n  - 2-column grid on mobile, 3-4 columns on desktop\n- **Forecast Card**: Featured placement with gradient accent border (purple to pink gradient)\n  - AI-generated insights with supportive icon\n  - \"Generated by AI\" subtle badge\n  - Call-to-action button for detailed view\n\n### Data Visualization\n- **Chart Container**: Full-width card with p-6, rounded-xl\n- **Chart Library**: Chart.js via CDN for line/area charts\n- **Visualization Style**: \n  - Smooth curved lines for trend data\n  - Subtle gradient fills beneath lines (10-20% opacity)\n  - Grid lines: minimal, light gray\n  - Tooltips: white card with shadow on hover\n  - Time range selector: tabs (7D, 30D, 90D)\n\n### Forms & Inputs\n- **OAuth Connection**: Prominent \"Connect Ultrahuman\" button with brand integration\n  - Icon + Label + Status badge\n  - Outline variant with blurred background if over imagery\n- **Input Fields**: Consistent with dark mode throughout including text fields and form inputs\n\n### Status Indicators\n- **Sync Status**: Pill badge (Recently synced, Syncing now, Connection needed)\n- **Data Freshness**: Timestamp with relative time (\"Updated 2 hours ago\")\n- **Loading States**: Skeleton screens for metrics while loading, pulse animation\n\n## Images\n\n**Hero Section**: NO large hero image - this is a dashboard app, not a marketing page\n\n**Avatar/Profile**: User profile photo in header navigation (circular, 40x40px)\n\n**Empty States**: Illustration for \"Connect your Ultrahuman device\" onboarding screen\n- Placement: Center of dashboard before OAuth connection\n- Style: Simple line art illustration of health tracking devices in brand purple\n- Supporting text with clear CTA button\n\n**Metric Icons**: Use Heroicons library via CDN for consistent iconography\n- Heart (HRV), Moon (Sleep), Activity (Movement), Droplet (Glucose), Sparkles (AI Forecast)\n- Size: 24x24px in metric cards, 32x32px in featured sections\n\n## Animations\n\n**Minimal & Purposeful**:\n- Chart data entrance: Subtle fade-in with 300ms delay as data loads\n- Metric card hover: Slight lift (translate-y-1) with shadow increase\n- Loading states: Gentle pulse for skeleton screens\n- NO distracting scroll animations or unnecessary motion\n\n## Key UX Patterns\n\n- **Authentication Flow**: Clean centered auth forms with Supabase integration, welcoming copy\n- **First-Time Setup**: Clear onboarding guiding OAuth connection with Ultrahuman\n- **Dashboard Hierarchy**: AI Forecast prominent at top, followed by today's key metrics grid, then historical chart\n- **Responsive Design**: Single column mobile stacking, multi-column desktop grid for efficient data scanning","size_bytes":5406},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Wellness Tracker - Women's Health Application\n\n## Overview\nA personalized women's health tracking application that integrates with Ultrahuman devices to provide AI-powered wellness forecasts. The app uses Supabase for authentication and database, with AI forecasting via Supabase Edge Functions calling OpenAI.\n\n## Tech Stack\n- **Frontend**: React, TypeScript, Tailwind CSS, Shadcn UI, Recharts\n- **Backend**: Express.js, Node.js\n- **Database**: Neon PostgreSQL (transitioning to full Supabase)\n- **Authentication**: Supabase Auth (replacing custom bcrypt auth)\n- **AI**: OpenAI GPT-4 via Supabase Edge Functions\n- **Health Data**: Ultrahuman Partner API (OAuth 2.0)\n\n## Features\n1. **User Authentication**: Supabase Auth with email/password (migrated from bcrypt)\n2. **Ultrahuman OAuth Integration**: Connect to Ultrahuman devices for health data\n3. **Health Metrics Tracking**: Sleep, HRV, recovery, glucose, temperature, steps\n4. **Menstrual Cycle Tracking**: Track period dates, flow intensity, and symptoms correlated with biometrics\n5. **AI Wellness Forecasts**: Personalized predictions via Supabase Edge Functions with cycle-aware insights\n6. **Historical Data Analysis**: Trend detection, anomaly alerts, correlation heatmaps, and AI-powered insights\n7. **Health Goal Setting**: Create and track personalized health targets with progress monitoring and deadline management\n8. **Data Visualization**: Interactive charts showing health metric trends\n9. **Dark/Light Mode**: Theme toggle with persistent user preference\n\n## Environment Variables\nRequired secrets in Replit Secrets:\n- `DATABASE_URL`: Supabase PostgreSQL connection string (pooler at port 6543)\n- `SUPABASE_URL`: Supabase project URL\n- `SUPABASE_ANON_KEY`: Supabase anonymous key for client auth and token verification\n- `SUPABASE_SERVICE_ROLE_KEY`: (Optional) Supabase service role key for admin operations\n- `OPENAI_API_KEY`: OpenAI API key (used in edge functions)\n- `ULTRAHUMAN_CLIENT_ID`: Ultrahuman Partner API client ID\n- `ULTRAHUMAN_CLIENT_SECRET`: Ultrahuman Partner API client secret\n- `SESSION_SECRET`: Session secret for Express sessions\n- `USE_EDGE_FUNCTIONS`: Set to 'true' to use Supabase Edge Functions for AI (optional)\n\n**Note**: The application now uses the Supabase anon key for authentication token verification, eliminating the strict requirement for the service role key.\n\n## Database Schema\n- **users**: User accounts (UUID primary keys for Supabase Auth compatibility)\n- **ultrahuman_tokens**: OAuth tokens for Ultrahuman API access\n- **health_metrics**: Daily health metrics from Ultrahuman devices\n- **cycle_tracking**: Menstrual cycle data (period dates, flow, symptoms, notes)\n- **health_goals**: Personal health targets with progress tracking (improve/reduce/maintain types)\n- **wellness_forecasts**: AI-generated wellness predictions and recommendations\n\n## API Routes\n### Configuration\n- `GET /api/config/supabase`: Get Supabase config for client initialization\n\n### Authentication\n- `POST /api/users/sync`: Sync Supabase Auth user to local database\n- Authentication handled by Supabase Auth (client-side)\n\n### Ultrahuman Integration\n- `POST /api/ultrahuman/callback`: OAuth callback handler\n- `POST /api/ultrahuman/sync`: Sync health data from Ultrahuman\n\n### Health Data\n- `GET /api/metrics/:userId`: Get user's health metrics\n- `GET /api/forecast/:userId`: Get latest wellness forecast\n- `POST /api/forecast/generate`: Generate AI forecast (uses Edge Function if enabled, includes cycle phase)\n\n### Cycle Tracking\n- `GET /api/cycles/:userId`: Get user's cycle tracking history\n- `GET /api/cycles/:userId/latest`: Get latest cycle entry\n- `POST /api/cycles`: Create new cycle entry\n- `PATCH /api/cycles/:id`: Update existing cycle entry\n\n### Health Goals\n- `GET /api/goals/:userId`: Get user's health goals (supports ?status=active filter)\n- `GET /api/goals/detail/:id`: Get specific goal details\n- `POST /api/goals`: Create new health goal\n- `PATCH /api/goals/:id`: Update existing goal (progress, deadline, description)\n- `DELETE /api/goals/:id`: Delete health goal\n\n## User Flow\n1. Sign up or log in to the application\n2. Connect Ultrahuman device via OAuth flow\n3. Sync health data from the past 7 days\n4. View personalized AI wellness forecast on dashboard\n5. Explore health metrics and trends over time\n\n## Development\nThe workflow \"Start application\" runs `npm run dev` which starts both Express backend and Vite frontend on the same port.\n\n## Design System\n- **Primary Color**: Purple (wellness, trust)\n- **Fonts**: Inter (body), DM Sans (headings)\n- **Spacing**: Consistent 4px grid system\n- **Components**: Shadcn UI with custom health-focused design\n\n## Supabase Configuration for Testing\n\n### Email Validation Settings\nSupabase has specific email validation requirements that may affect testing:\n\n1. **Email Confirmation Requirement**: By default, Supabase may require email confirmation for new signups\n   - To disable for development: Go to Supabase Dashboard → Authentication → Providers → Email → Toggle off \"Confirm email\"\n   - This allows immediate login after signup without email verification\n\n2. **Allowed Email Domains**: Supabase may restrict which email domains can sign up\n   - Check project settings for any domain allowlists\n   - For testing, use real email domains like gmail.com, yahoo.com, etc.\n\n3. **Team Member Emails**: Without custom SMTP, only team member emails can receive auth emails by default\n   - Add test email addresses to your Supabase project team, OR\n   - Set up custom SMTP (Resend, SendGrid, etc.), OR\n   - Disable email confirmation (recommended for development)\n\n### Security Implementation (October 2025)\n\n**Authentication & Authorization**\n- All user-specific API routes protected with `authenticateUser()` helper\n- Bearer token verification using Supabase Auth with anon key (no service role key required)\n- Consistent 401 responses for missing/invalid tokens\n- User ID matching enforced on all operations (403 for mismatches)\n\n**PATCH Payload Validation**\n- Created `updateCycleTrackingSchema` - whitelists safe cycle fields (excludes userId, id, createdAt, updatedAt)\n- Created `updateHealthGoalSchema` - whitelists safe goal fields (excludes userId, id, baselineValue, createdAt, updatedAt)\n- Prevents privilege escalation and immutable field manipulation via Zod schema validation\n- Returns 400 with validation details for invalid payloads\n\n**Edge Function Token Verification**\n- POST /api/forecast/generate verifies accessToken matches Bearer token\n- Prevents token replay attacks\n- Returns 403 for token mismatches\n\n**Routes Protected**: All 18 user-specific endpoints including cycles, goals, metrics, forecasts, and exports\n\n## Recent Changes (Oct 2025)\n\n### Health Goal Setting System (Latest)\n- **Goal Types**: Support for improve, reduce, and maintain goal types\n- **Progress Tracking**: Visual progress bars with baseline preservation for accurate tracking\n- **Deadline Management**: Optional deadlines with days remaining/overdue indicators\n- **Smart Completion**: Goal-type aware completion logic (improve: reach target, reduce: drop below target, maintain: stay within 5% tolerance)\n- **Baseline Tracking**: Stable baseline values for reduce goals to accurately show progress from starting point\n- **UI Components**: GoalCard with progress visualization, GoalDialog for create/edit with metric auto-population\n- **Integration**: Goals page with active/completed tabs and navigation from Dashboard\n\n### Historical Data Analysis Feature\n- **Trends Page**: Multi-tab interface with Overview, Metrics, Correlations, and Anomalies views\n- **Anomaly Detection**: Statistical z-score analysis identifies unusual patterns (>2σ from mean)\n- **Correlation Analysis**: Heatmap showing relationships between health metrics\n- **Trend Insights**: AI-powered analysis comparing recent vs historical data\n- **Visualizations**: 30-day time-series charts for all metrics with Recharts\n- **Cycle Integration**: Trend insights consider menstrual cycle phase context\n\n### Cycle Tracking Feature\n- **Database**: Added `cycle_tracking` table for menstrual cycle data\n- **UI Components**: CycleTrackingDialog (input form) and CycleTrackingCard (dashboard display)\n- **Cycle Phase Calculation**: Determines follicular/ovulation/luteal/menstrual phases\n- **AI Integration**: Cycle phase passed to forecast generation for phase-aware wellness recommendations\n- **Features**: Track period dates, flow intensity, symptoms, and notes with visual phase indicators\n\n### Supabase Migration\n- **Database**: Migrated schema to use UUID primary keys for Supabase Auth compatibility\n- **Authentication**: Replaced custom bcrypt auth with Supabase Auth\n  - Client-side auth using @supabase/supabase-js\n  - Dynamic Supabase client initialization via /api/config/supabase endpoint\n  - User sync endpoint to maintain local user records\n- **Edge Functions**: Created Supabase Edge Function for AI forecasting\n  - Function: `generate-forecast` calls OpenAI securely\n  - Backend supports both edge function and direct OpenAI (controlled by USE_EDGE_FUNCTIONS env var)\n  - Deployment instructions in supabase/functions/README.md\n\n### Architecture\n- SSL certificate handling for Neon database connection\n- Async Supabase client initialization in frontend\n- Backward-compatible AI forecasting (edge function + fallback)\n\n### Previous Changes\n- Initial implementation with full MVP features\n- OpenAI GPT-4 integration for wellness forecasting\n- Ultrahuman OAuth 2.0 flow implemented\n- Responsive dashboard with health visualizations\n","size_bytes":9569},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"var(--font-sans)\"],\n        heading: [\"DM Sans\", \"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4109},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, syncUserSchema, insertCycleTrackingSchema, insertHealthGoalSchema, updateCycleTrackingSchema, updateHealthGoalSchema } from \"@shared/schema\";\nimport { exchangeCodeForTokens, refreshAccessToken, fetchHealthMetrics, fetchDailyMetricsWithDirectToken } from \"./lib/ultrahuman\";\nimport { generateWellnessForecast } from \"./lib/openai\";\nimport type { User } from \"@supabase/supabase-js\";\n\nasync function authenticateUser(req: Request, res: Response): Promise<User | null> {\n  const authHeader = req.headers.authorization;\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    res.status(401).json({ error: \"Unauthorized\" });\n    return null;\n  }\n\n  try {\n    const token = authHeader.replace('Bearer ', '');\n    const { verifySupabaseToken } = await import('./lib/supabase');\n    const authenticatedUser = await verifySupabaseToken(token);\n    return authenticatedUser;\n  } catch (error) {\n    res.status(401).json({ error: \"Invalid or expired token\" });\n    return null;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Config routes - MUST be before any middleware that might interfere\n  app.get(\"/api/config/supabase\", (_req, res) => {\n    const url = process.env.SUPABASE_URL;\n    const anonKey = process.env.SUPABASE_ANON_KEY;\n    \n    if (!url || !anonKey) {\n      return res.status(500).json({ \n        error: \"Supabase configuration not available. Please configure SUPABASE_URL and SUPABASE_ANON_KEY.\" \n      });\n    }\n    \n    res.json({ url, anonKey });\n  });\n\n  app.get(\"/api/config/ultrahuman\", (_req, res) => {\n    const clientId = process.env.ULTRAHUMAN_CLIENT_ID;\n    \n    if (!clientId) {\n      return res.status(500).json({ \n        error: \"Ultrahuman configuration not available. Please configure ULTRAHUMAN_CLIENT_ID.\" \n      });\n    }\n    \n    res.json({ clientId });\n  });\n  \n  // Auth routes\n  app.post(\"/api/users/sync\", async (req, res) => {\n    try {\n      const authenticatedUser = await authenticateUser(req, res);\n      if (!authenticatedUser) return;\n\n      const result = syncUserSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ \n          error: \"Invalid user data\", \n          details: result.error.issues \n        });\n      }\n\n      const { id, email, name } = result.data;\n      \n      if (id !== authenticatedUser.id) {\n        return res.status(403).json({ error: \"Forbidden: User ID mismatch\" });\n      }\n      \n      const existingUser = await storage.getUserById(id);\n      if (existingUser) {\n        return res.json({ user: existingUser });\n      }\n\n      const user = await storage.createUser({\n        id,\n        email,\n        name: name || null,\n      });\n\n      res.json({ user });\n    } catch (error: any) {\n      console.error(\"User sync error:\", error);\n      res.status(error.message?.includes('token') ? 401 : 400).json({ \n        error: error.message || \"User sync failed\" \n      });\n    }\n  });\n\n  // Ultrahuman OAuth routes\n  app.post(\"/api/ultrahuman/callback\", async (req, res) => {\n    try {\n      const authenticatedUser = await authenticateUser(req, res);\n      if (!authenticatedUser) return;\n\n      const { code, userId } = req.body;\n      \n      if (!code || !userId) {\n        return res.status(400).json({ error: \"Missing code or userId\" });\n      }\n\n      if (userId !== authenticatedUser.id) {\n        return res.status(403).json({ error: \"Forbidden: Cannot create token for other users\" });\n      }\n\n      const redirectUri = `${req.protocol}://${req.get(\"host\")}/auth/ultrahuman/callback`;\n      const tokens = await exchangeCodeForTokens(code, redirectUri);\n\n      const expiresAt = new Date(Date.now() + tokens.expires_in * 1000);\n\n      await storage.createToken({\n        userId,\n        accessToken: tokens.access_token,\n        refreshToken: tokens.refresh_token,\n        expiresAt,\n        scope: tokens.scope,\n      });\n\n      res.json({ success: true });\n    } catch (error: any) {\n      console.error(\"OAuth callback error:\", error);\n      res.status(400).json({ error: error.message || \"OAuth callback failed\" });\n    }\n  });\n\n  app.post(\"/api/ultrahuman/sync\", async (req, res) => {\n    try {\n      const authenticatedUser = await authenticateUser(req, res);\n      if (!authenticatedUser) return;\n\n      const { userId } = req.body;\n      \n      if (!userId) {\n        return res.status(400).json({ error: \"Missing userId\" });\n      }\n\n      if (userId !== authenticatedUser.id) {\n        return res.status(403).json({ error: \"Forbidden: Cannot sync data for other users\" });\n      }\n\n      let token = await storage.getTokenByUserId(userId);\n      if (!token) {\n        return res.status(404).json({ error: \"Ultrahuman not connected\" });\n      }\n\n      // Check if token is expired and refresh if needed\n      if (new Date(token.expiresAt) < new Date()) {\n        const newTokens = await refreshAccessToken(token.refreshToken);\n        const newExpiresAt = new Date(Date.now() + newTokens.expires_in * 1000);\n        \n        token = await storage.updateToken(token.id, {\n          accessToken: newTokens.access_token,\n          refreshToken: newTokens.refresh_token,\n          expiresAt: newExpiresAt,\n        });\n        \n        if (!token) {\n          return res.status(500).json({ error: \"Failed to update token\" });\n        }\n      }\n\n      // Fetch health metrics for the last 7 days\n      const promises = [];\n      for (let i = 0; i < 7; i++) {\n        const date = new Date();\n        date.setDate(date.getDate() - i);\n        const dateStr = date.toISOString().split('T')[0];\n        promises.push(\n          fetchHealthMetrics(token.accessToken, dateStr).catch((err) => {\n            console.error(`Failed to fetch metrics for ${dateStr}:`, err);\n            return null;\n          })\n        );\n      }\n\n      const metricsResults = await Promise.all(promises);\n      const validMetrics = metricsResults.filter((m) => m !== null);\n\n      // Store metrics in database\n      for (const metricData of validMetrics) {\n        if (metricData && metricData.date) {\n          await storage.createMetric({\n            userId,\n            date: new Date(metricData.date),\n            sleepScore: metricData.sleep_score,\n            sleepDuration: metricData.sleep_duration,\n            hrv: metricData.hrv,\n            restingHeartRate: metricData.resting_heart_rate,\n            recoveryScore: metricData.recovery_score,\n            steps: metricData.steps,\n            avgGlucose: metricData.avg_glucose,\n            glucoseVariability: metricData.glucose_variability,\n            temperature: metricData.temperature,\n            vo2Max: metricData.vo2_max,\n            rawData: metricData,\n          });\n        }\n      }\n\n      res.json({ success: true, metricsCount: validMetrics.length });\n    } catch (error: any) {\n      console.error(\"Sync error:\", error);\n      res.status(400).json({ error: error.message || \"Sync failed\" });\n    }\n  });\n\n  // Direct token sync - uses ULTRAHUMAN_ACCESS_TOKEN env var\n  app.post(\"/api/ultrahuman/sync-direct\", async (req, res) => {\n    try {\n      const authenticatedUser = await authenticateUser(req, res);\n      if (!authenticatedUser) return;\n\n      const { userId, email } = req.body;\n      \n      if (!userId) {\n        return res.status(400).json({ error: \"Missing userId\" });\n      }\n\n      if (userId !== authenticatedUser.id) {\n        return res.status(403).json({ error: \"Forbidden: Cannot sync data for other users\" });\n      }\n\n      // Fetch health metrics for the last 7 days using direct token\n      const promises = [];\n      const dateStrs: string[] = [];\n      for (let i = 0; i < 7; i++) {\n        const date = new Date();\n        date.setDate(date.getDate() - i);\n        const dateStr = date.toISOString().split('T')[0];\n        dateStrs.push(dateStr);\n        promises.push(\n          fetchDailyMetricsWithDirectToken(dateStr, email).catch((err) => {\n            console.error(`Failed to fetch metrics for ${dateStr}:`, err);\n            return null;\n          })\n        );\n      }\n\n      const metricsResults = await Promise.all(promises);\n\n      // Fetch all existing metrics for this user to check for duplicates\n      const existingMetrics = await storage.getMetricsByUserId(userId, 30);\n      const existingDates = new Set(\n        existingMetrics.map(m => new Date(m.date).toISOString().split('T')[0])\n      );\n\n      let insertedCount = 0;\n\n      // Process each day's metrics\n      for (let i = 0; i < metricsResults.length; i++) {\n        const response = metricsResults[i];\n        const dateStr = dateStrs[i];\n        \n        if (!response || !response.data || !response.data.metrics) continue;\n        \n        // Check if we already have this date\n        if (existingDates.has(dateStr)) continue;\n        \n        // Extract metrics for this specific date\n        const dateMetrics = response.data.metrics[dateStr];\n        if (!dateMetrics || !Array.isArray(dateMetrics)) continue;\n        \n        console.log(`[Sync] Processing ${dateMetrics.length} metric types for ${dateStr}`);\n        \n        // Log all metric types to understand data structure\n        const metricTypes = dateMetrics.map(m => m.type).filter(Boolean);\n        console.log(`[Sync] Available metric types for ${dateStr}:`, metricTypes);\n        \n        // Aggregate all metrics for this date\n        const aggregated: any = {};\n        \n        for (const metric of dateMetrics) {\n          if (!metric || !metric.type || !metric.object) continue;\n          \n          const { type, object: metricObj } = metric;\n          \n          // Helper to extract value from object (handles both direct value and values array)\n          const extractValue = (obj: any, useAverage = false): number | null => {\n            if (obj.value !== undefined && obj.value !== null) {\n              return obj.value;\n            }\n            if (obj.values && Array.isArray(obj.values) && obj.values.length > 0) {\n              const values = obj.values.map((v: any) => v.value).filter((v: number) => v !== null && v !== undefined && !isNaN(v));\n              if (values.length === 0) return null;\n              if (useAverage) {\n                return Math.round(values.reduce((a: number, b: number) => a + b) / values.length);\n              }\n              return values[values.length - 1]; // Most recent value\n            }\n            return null;\n          };\n          \n          // Extract values based on metric type\n          switch (type) {\n            case 'sleep':\n              // Sleep is a complex nested object\n              console.log('Processing sleep metric:', JSON.stringify(metricObj, null, 2));\n              if (metricObj.sleep_score?.score !== undefined) {\n                aggregated.sleepScore = metricObj.sleep_score.score;\n                console.log('Extracted sleep score:', aggregated.sleepScore);\n              }\n              if (metricObj.total_sleep?.minutes !== undefined) {\n                aggregated.sleepDuration = metricObj.total_sleep.minutes;\n                console.log('Extracted sleep duration:', aggregated.sleepDuration);\n              }\n              if (metricObj.average_body_temperature?.celsius !== undefined) {\n                aggregated.temperature = metricObj.average_body_temperature.celsius;\n                console.log('Extracted temperature:', aggregated.temperature);\n              }\n              break;\n            \n            case 'night_rhr':\n            case 'sleep_rhr':\n            case 'resting_hr':\n              aggregated.restingHeartRate = extractValue(metricObj);\n              break;\n            \n            case 'hrv':\n            case 'avg_sleep_hrv':\n              aggregated.hrv = extractValue(metricObj, true); // Use average\n              break;\n            \n            case 'steps':\n              aggregated.steps = extractValue(metricObj);\n              break;\n            \n            case 'recovery':\n            case 'recovery_index':\n            case 'recovery_score':\n              aggregated.recoveryScore = extractValue(metricObj);\n              break;\n            \n            case 'glucose':\n            case 'average_glucose':\n            case 'avg_glucose':\n              aggregated.avgGlucose = extractValue(metricObj);\n              break;\n            \n            case 'glucose_variability':\n              aggregated.glucoseVariability = extractValue(metricObj);\n              break;\n            \n            case 'vo2_max':\n              aggregated.vo2Max = extractValue(metricObj);\n              break;\n          }\n        }\n        \n        // Only insert if we have at least one valid metric\n        if (Object.keys(aggregated).length > 0) {\n          await storage.createMetric({\n            userId,\n            date: new Date(dateStr),\n            sleepScore: aggregated.sleepScore || null,\n            sleepDuration: aggregated.sleepDuration || null,\n            hrv: aggregated.hrv || null,\n            restingHeartRate: aggregated.restingHeartRate || null,\n            recoveryScore: aggregated.recoveryScore || null,\n            steps: aggregated.steps || null,\n            avgGlucose: aggregated.avgGlucose || null,\n            glucoseVariability: aggregated.glucoseVariability || null,\n            temperature: aggregated.temperature || null,\n            vo2Max: aggregated.vo2Max || null,\n            rawData: dateMetrics,\n          });\n          \n          insertedCount++;\n          existingDates.add(dateStr);\n          console.log(`[Sync] Inserted metrics for ${dateStr}:`, aggregated);\n        }\n      }\n\n      res.json({ success: true, metricsCount: insertedCount });\n    } catch (error: any) {\n      console.error(\"Direct sync error:\", error);\n      res.status(400).json({ error: error.message || \"Direct sync failed\" });\n    }\n  });\n\n  // Health metrics routes\n  app.get(\"/api/metrics/:userId\", async (req, res) => {\n    try {\n      const authenticatedUser = await authenticateUser(req, res);\n      if (!authenticatedUser) return;\n\n      const { userId } = req.params;\n\n      if (userId !== authenticatedUser.id) {\n        return res.status(403).json({ error: \"Forbidden: Cannot access metrics for other users\" });\n      }\n\n      const metrics = await storage.getMetricsByUserId(userId, 30);\n      res.json(metrics);\n    } catch (error: any) {\n      console.error(\"Get metrics error:\", error);\n      res.status(400).json({ error: error.message || \"Failed to get metrics\" });\n    }\n  });\n\n  // Wellness forecast routes\n  app.get(\"/api/forecast/:userId\", async (req, res) => {\n    try {\n      const authenticatedUser = await authenticateUser(req, res);\n      if (!authenticatedUser) return;\n\n      const { userId } = req.params;\n\n      if (userId !== authenticatedUser.id) {\n        return res.status(403).json({ error: \"Forbidden: Cannot access forecast for other users\" });\n      }\n\n      const forecast = await storage.getLatestForecast(userId);\n      res.json(forecast || null);\n    } catch (error: any) {\n      console.error(\"Get forecast error:\", error);\n      res.status(400).json({ error: error.message || \"Failed to get forecast\" });\n    }\n  });\n\n  app.post(\"/api/forecast/generate\", async (req, res) => {\n    try {\n      const authenticatedUser = await authenticateUser(req, res);\n      if (!authenticatedUser) return;\n\n      const { userId, accessToken, cyclePhase } = req.body;\n      \n      if (!userId) {\n        return res.status(400).json({ error: \"Missing userId\" });\n      }\n\n      if (userId !== authenticatedUser.id) {\n        return res.status(403).json({ error: \"Forbidden: Cannot generate forecast for other users\" });\n      }\n\n      const metrics = await storage.getMetricsByUserId(userId, 7);\n      \n      if (metrics.length === 0) {\n        return res.status(400).json({ error: \"No health metrics available\" });\n      }\n\n      let forecastText: string;\n      let recommendations: string[] | null = null;\n      let insights: any = null;\n\n      // If Supabase Edge Functions are deployed and accessToken is provided, use edge function\n      // The accessToken should be the same as the Bearer token used for authentication\n      if (accessToken && process.env.SUPABASE_URL && process.env.USE_EDGE_FUNCTIONS === 'true') {\n        const authHeader = req.headers.authorization;\n        const bearerToken = authHeader?.replace('Bearer ', '');\n        \n        if (accessToken !== bearerToken) {\n          return res.status(403).json({ error: \"Forbidden: Access token mismatch\" });\n        }\n        const { callGenerateForecastEdgeFunction } = await import('./lib/supabase-edge');\n        \n        const edgeRequest = {\n          userId,\n          metrics: metrics.map((m) => ({\n            date: m.date.toISOString().split('T')[0],\n            hrvScore: m.hrv || undefined,\n            sleepScore: m.sleepScore || undefined,\n            glucoseLevel: m.avgGlucose ? Number(m.avgGlucose) : undefined,\n            steps: m.steps || undefined,\n            restingHeartRate: m.restingHeartRate || undefined,\n          })),\n          cyclePhase,\n        };\n\n        const edgeResponse = await callGenerateForecastEdgeFunction(accessToken, edgeRequest);\n        forecastText = edgeResponse.forecast;\n        recommendations = edgeResponse.recommendations || null;\n        insights = edgeResponse.insights || null;\n      } else {\n        // Fallback to direct OpenAI call (for development or if edge functions not deployed)\n        const forecastData = await generateWellnessForecast(\n          metrics.map((m) => ({\n            sleepScore: m.sleepScore || undefined,\n            sleepDuration: m.sleepDuration ? Number(m.sleepDuration) : undefined,\n            hrv: m.hrv || undefined,\n            restingHeartRate: m.restingHeartRate || undefined,\n            recoveryScore: m.recoveryScore || undefined,\n            steps: m.steps || undefined,\n            avgGlucose: m.avgGlucose ? Number(m.avgGlucose) : undefined,\n            glucoseVariability: m.glucoseVariability ? Number(m.glucoseVariability) : undefined,\n            temperature: m.temperature ? Number(m.temperature) : undefined,\n            vo2Max: m.vo2Max ? Number(m.vo2Max) : undefined,\n          }))\n        );\n        forecastText = forecastData.forecast;\n        recommendations = forecastData.recommendations;\n        insights = forecastData.insights;\n      }\n\n      const forecast = await storage.createForecast({\n        userId,\n        forecast: forecastText,\n        insights: insights,\n        recommendations: recommendations,\n        metricsAnalyzed: { count: metrics.length },\n      });\n\n      res.json(forecast);\n    } catch (error: any) {\n      console.error(\"Generate forecast error:\", error);\n      res.status(400).json({ error: error.message || \"Failed to generate forecast\" });\n    }\n  });\n\n  // Cycle tracking routes\n  app.get(\"/api/cycles/:userId\", async (req, res) => {\n    try {\n      const authenticatedUser = await authenticateUser(req, res);\n      if (!authenticatedUser) return;\n\n      const { userId } = req.params;\n\n      if (userId !== authenticatedUser.id) {\n        return res.status(403).json({ error: \"Forbidden: Cannot access cycles for other users\" });\n      }\n\n      const cycles = await storage.getCyclesByUserId(userId);\n      res.json(cycles);\n    } catch (error: any) {\n      console.error(\"Get cycles error:\", error);\n      res.status(400).json({ error: error.message || \"Failed to get cycles\" });\n    }\n  });\n\n  app.get(\"/api/cycles/:userId/latest\", async (req, res) => {\n    try {\n      const authenticatedUser = await authenticateUser(req, res);\n      if (!authenticatedUser) return;\n\n      const { userId } = req.params;\n\n      if (userId !== authenticatedUser.id) {\n        return res.status(403).json({ error: \"Forbidden: Cannot access cycles for other users\" });\n      }\n\n      const cycle = await storage.getLatestCycle(userId);\n      res.json(cycle || null);\n    } catch (error: any) {\n      console.error(\"Get latest cycle error:\", error);\n      res.status(400).json({ error: error.message || \"Failed to get latest cycle\" });\n    }\n  });\n\n  app.post(\"/api/cycles\", async (req, res) => {\n    try {\n      const authenticatedUser = await authenticateUser(req, res);\n      if (!authenticatedUser) return;\n\n      const result = insertCycleTrackingSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ \n          error: \"Invalid cycle data\", \n          details: result.error.issues \n        });\n      }\n\n      if (result.data.userId !== authenticatedUser.id) {\n        return res.status(403).json({ error: \"Forbidden: Cannot create cycles for other users\" });\n      }\n\n      const cycle = await storage.createCycle(result.data);\n      res.json(cycle);\n    } catch (error: any) {\n      console.error(\"Create cycle error:\", error);\n      res.status(400).json({ error: error.message || \"Failed to create cycle\" });\n    }\n  });\n\n  app.patch(\"/api/cycles/:id\", async (req, res) => {\n    try {\n      const authenticatedUser = await authenticateUser(req, res);\n      if (!authenticatedUser) return;\n\n      const { id } = req.params;\n      \n      const existingCycle = await storage.getCycleById(id);\n      if (!existingCycle) {\n        return res.status(404).json({ error: \"Cycle not found\" });\n      }\n\n      if (existingCycle.userId !== authenticatedUser.id) {\n        return res.status(403).json({ error: \"Forbidden: Cannot update cycles for other users\" });\n      }\n\n      const result = updateCycleTrackingSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ \n          error: \"Invalid cycle update data\", \n          details: result.error.issues \n        });\n      }\n\n      const cycle = await storage.updateCycle(id, result.data);\n      res.json(cycle);\n    } catch (error: any) {\n      console.error(\"Update cycle error:\", error);\n      res.status(400).json({ error: error.message || \"Failed to update cycle\" });\n    }\n  });\n\n  // Health Goals routes\n  app.get(\"/api/goals/:userId\", async (req, res) => {\n    try {\n      const authenticatedUser = await authenticateUser(req, res);\n      if (!authenticatedUser) return;\n\n      const { userId } = req.params;\n\n      if (userId !== authenticatedUser.id) {\n        return res.status(403).json({ error: \"Forbidden: Cannot access goals for other users\" });\n      }\n\n      const { status } = req.query;\n      const goals = await storage.getGoalsByUserId(userId, status as string);\n      res.json(goals);\n    } catch (error: any) {\n      console.error(\"Get goals error:\", error);\n      res.status(400).json({ error: error.message || \"Failed to get goals\" });\n    }\n  });\n\n  app.get(\"/api/goals/detail/:id\", async (req, res) => {\n    try {\n      const authenticatedUser = await authenticateUser(req, res);\n      if (!authenticatedUser) return;\n\n      const { id } = req.params;\n      const goal = await storage.getGoalById(id);\n      if (!goal) {\n        return res.status(404).json({ error: \"Goal not found\" });\n      }\n\n      if (goal.userId !== authenticatedUser.id) {\n        return res.status(403).json({ error: \"Forbidden: Cannot access goals for other users\" });\n      }\n\n      res.json(goal);\n    } catch (error: any) {\n      console.error(\"Get goal error:\", error);\n      res.status(400).json({ error: error.message || \"Failed to get goal\" });\n    }\n  });\n\n  app.post(\"/api/goals\", async (req, res) => {\n    try {\n      const authenticatedUser = await authenticateUser(req, res);\n      if (!authenticatedUser) return;\n\n      const result = insertHealthGoalSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ \n          error: \"Invalid goal data\", \n          details: result.error.issues \n        });\n      }\n\n      if (result.data.userId !== authenticatedUser.id) {\n        return res.status(403).json({ error: \"Forbidden: Cannot create goals for other users\" });\n      }\n\n      const goal = await storage.createGoal(result.data);\n      res.json(goal);\n    } catch (error: any) {\n      console.error(\"Create goal error:\", error);\n      res.status(400).json({ error: error.message || \"Failed to create goal\" });\n    }\n  });\n\n  app.patch(\"/api/goals/:id\", async (req, res) => {\n    try {\n      const authenticatedUser = await authenticateUser(req, res);\n      if (!authenticatedUser) return;\n\n      const { id } = req.params;\n      \n      const existingGoal = await storage.getGoalById(id);\n      if (!existingGoal) {\n        return res.status(404).json({ error: \"Goal not found\" });\n      }\n\n      if (existingGoal.userId !== authenticatedUser.id) {\n        return res.status(403).json({ error: \"Forbidden: Cannot update goals for other users\" });\n      }\n\n      const result = updateHealthGoalSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ \n          error: \"Invalid goal update data\", \n          details: result.error.issues \n        });\n      }\n\n      const goal = await storage.updateGoal(id, result.data);\n      res.json(goal);\n    } catch (error: any) {\n      console.error(\"Update goal error:\", error);\n      res.status(400).json({ error: error.message || \"Failed to update goal\" });\n    }\n  });\n\n  app.delete(\"/api/goals/:id\", async (req, res) => {\n    try {\n      const authenticatedUser = await authenticateUser(req, res);\n      if (!authenticatedUser) return;\n\n      const { id } = req.params;\n      \n      const existingGoal = await storage.getGoalById(id);\n      if (!existingGoal) {\n        return res.status(404).json({ error: \"Goal not found\" });\n      }\n\n      if (existingGoal.userId !== authenticatedUser.id) {\n        return res.status(403).json({ error: \"Forbidden: Cannot delete goals for other users\" });\n      }\n\n      await storage.deleteGoal(id);\n      res.json({ success: true });\n    } catch (error: any) {\n      console.error(\"Delete goal error:\", error);\n      res.status(400).json({ error: error.message || \"Failed to delete goal\" });\n    }\n  });\n\n  // Data Export routes\n  app.get(\"/api/export/metrics/:userId\", async (req, res) => {\n    try {\n      const authenticatedUser = await authenticateUser(req, res);\n      if (!authenticatedUser) return;\n\n      const { userId } = req.params;\n      const { startDate, endDate } = req.query;\n\n      if (authenticatedUser.id !== userId) {\n        return res.status(403).json({ error: \"Forbidden: Cannot export data for other users\" });\n      }\n\n      if (!startDate || !endDate) {\n        return res.status(400).json({ error: \"Start and end dates are required\" });\n      }\n\n      const start = new Date(startDate as string);\n      const end = new Date(endDate as string);\n\n      const metrics = await storage.getMetricsByDateRange(userId, start, end);\n\n      const csvHeaders = [\n        \"Date\",\n        \"Sleep Score\",\n        \"Sleep Duration (hrs)\",\n        \"HRV\",\n        \"Resting Heart Rate\",\n        \"Recovery Score\",\n        \"Steps\",\n        \"Avg Glucose (mg/dL)\",\n        \"Glucose Variability\",\n        \"Temperature (°C)\",\n        \"VO2 Max\"\n      ].join(\",\");\n\n      const csvRows = metrics.map(m => [\n        new Date(m.date).toISOString().split('T')[0],\n        m.sleepScore || \"\",\n        m.sleepDuration || \"\",\n        m.hrv || \"\",\n        m.restingHeartRate || \"\",\n        m.recoveryScore || \"\",\n        m.steps || \"\",\n        m.avgGlucose || \"\",\n        m.glucoseVariability || \"\",\n        m.temperature || \"\",\n        m.vo2Max || \"\"\n      ].join(\",\"));\n\n      const csv = [csvHeaders, ...csvRows].join(\"\\n\");\n\n      res.setHeader(\"Content-Type\", \"text/csv\");\n      res.setHeader(\"Content-Disposition\", `attachment; filename=\"health-metrics-${startDate}-to-${endDate}.csv\"`);\n      res.send(csv);\n    } catch (error: any) {\n      console.error(\"Export metrics error:\", error);\n      res.status(400).json({ error: error.message || \"Failed to export metrics\" });\n    }\n  });\n\n  app.get(\"/api/export/goals/:userId\", async (req, res) => {\n    try {\n      const authenticatedUser = await authenticateUser(req, res);\n      if (!authenticatedUser) return;\n\n      const { userId } = req.params;\n\n      if (authenticatedUser.id !== userId) {\n        return res.status(403).json({ error: \"Forbidden: Cannot export data for other users\" });\n      }\n\n      const goals = await storage.getGoalsByUserId(userId);\n\n      const csvHeaders = [\n        \"Goal Type\",\n        \"Target Metric\",\n        \"Target Value\",\n        \"Baseline Value\",\n        \"Current Value\",\n        \"Status\",\n        \"Deadline\",\n        \"Description\",\n        \"Created At\"\n      ].join(\",\");\n\n      const csvRows = goals.map(g => [\n        g.goalType,\n        g.targetMetric,\n        g.targetValue,\n        g.baselineValue || \"\",\n        g.currentValue || \"\",\n        g.status,\n        g.deadline ? new Date(g.deadline).toISOString().split('T')[0] : \"\",\n        `\"${(g.description || \"\").replace(/\"/g, '\"\"')}\"`,\n        new Date(g.createdAt).toISOString().split('T')[0]\n      ].join(\",\"));\n\n      const csv = [csvHeaders, ...csvRows].join(\"\\n\");\n\n      res.setHeader(\"Content-Type\", \"text/csv\");\n      res.setHeader(\"Content-Disposition\", `attachment; filename=\"health-goals-${new Date().toISOString().split('T')[0]}.csv\"`);\n      res.send(csv);\n    } catch (error: any) {\n      console.error(\"Export goals error:\", error);\n      res.status(400).json({ error: error.message || \"Failed to export goals\" });\n    }\n  });\n\n  app.get(\"/api/export/cycles/:userId\", async (req, res) => {\n    try {\n      const authenticatedUser = await authenticateUser(req, res);\n      if (!authenticatedUser) return;\n\n      const { userId } = req.params;\n      const { startDate, endDate } = req.query;\n\n      if (authenticatedUser.id !== userId) {\n        return res.status(403).json({ error: \"Forbidden: Cannot export data for other users\" });\n      }\n\n      if (!startDate || !endDate) {\n        return res.status(400).json({ error: \"Start and end dates are required\" });\n      }\n\n      const start = new Date(startDate as string);\n      const end = new Date(endDate as string);\n\n      const cycles = await storage.getCyclesByDateRange(userId, start, end);\n\n      const csvHeaders = [\n        \"Period Start Date\",\n        \"Period End Date\",\n        \"Cycle Length (days)\",\n        \"Flow Intensity\",\n        \"Symptoms\",\n        \"Notes\"\n      ].join(\",\");\n\n      const csvRows = cycles.map(c => [\n        new Date(c.periodStartDate).toISOString().split('T')[0],\n        c.periodEndDate ? new Date(c.periodEndDate).toISOString().split('T')[0] : \"\",\n        c.cycleLength || \"\",\n        c.flowIntensity || \"\",\n        c.symptoms ? `\"${c.symptoms.join(\", \")}\"` : \"\",\n        `\"${(c.notes || \"\").replace(/\"/g, '\"\"')}\"`\n      ].join(\",\"));\n\n      const csv = [csvHeaders, ...csvRows].join(\"\\n\");\n\n      res.setHeader(\"Content-Type\", \"text/csv\");\n      res.setHeader(\"Content-Disposition\", `attachment; filename=\"cycle-tracking-${startDate}-to-${endDate}.csv\"`);\n      res.send(csv);\n    } catch (error: any) {\n      console.error(\"Export cycles error:\", error);\n      res.status(400).json({ error: error.message || \"Failed to export cycles\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":31202},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type UltrahumanToken,\n  type InsertUltrahumanToken,\n  type HealthMetric,\n  type InsertHealthMetric,\n  type WellnessForecast,\n  type InsertWellnessForecast,\n  type CycleTracking,\n  type InsertCycleTracking,\n  type HealthGoal,\n  type InsertHealthGoal,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { users, ultrahumanTokens, healthMetrics, wellnessForecasts, cycleTracking, healthGoals } from \"@shared/schema\";\nimport { eq, desc, and, gte, lte } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Users\n  getUserById(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Ultrahuman Tokens\n  getTokenByUserId(userId: string): Promise<UltrahumanToken | undefined>;\n  createToken(token: InsertUltrahumanToken): Promise<UltrahumanToken>;\n  updateToken(id: string, token: Partial<InsertUltrahumanToken>): Promise<UltrahumanToken | undefined>;\n  \n  // Health Metrics\n  getMetricsByUserId(userId: string, limit?: number): Promise<HealthMetric[]>;\n  getMetricsByDateRange(userId: string, startDate: Date, endDate: Date): Promise<HealthMetric[]>;\n  createMetric(metric: InsertHealthMetric): Promise<HealthMetric>;\n  \n  // Wellness Forecasts\n  getLatestForecast(userId: string): Promise<WellnessForecast | undefined>;\n  createForecast(forecast: InsertWellnessForecast): Promise<WellnessForecast>;\n  \n  // Cycle Tracking\n  getCyclesByUserId(userId: string, limit?: number): Promise<CycleTracking[]>;\n  getCyclesByDateRange(userId: string, startDate: Date, endDate: Date): Promise<CycleTracking[]>;\n  getLatestCycle(userId: string): Promise<CycleTracking | undefined>;\n  getCycleById(id: string): Promise<CycleTracking | undefined>;\n  createCycle(cycle: InsertCycleTracking): Promise<CycleTracking>;\n  updateCycle(id: string, cycle: Partial<InsertCycleTracking>): Promise<CycleTracking | undefined>;\n  \n  // Health Goals\n  getGoalsByUserId(userId: string, status?: string): Promise<HealthGoal[]>;\n  getGoalById(id: string): Promise<HealthGoal | undefined>;\n  createGoal(goal: InsertHealthGoal): Promise<HealthGoal>;\n  updateGoal(id: string, goal: Partial<InsertHealthGoal>): Promise<HealthGoal | undefined>;\n  deleteGoal(id: string): Promise<void>;\n}\n\nexport class DbStorage implements IStorage {\n  // Users\n  async getUserById(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  // Ultrahuman Tokens\n  async getTokenByUserId(userId: string): Promise<UltrahumanToken | undefined> {\n    const result = await db.select().from(ultrahumanTokens).where(eq(ultrahumanTokens.userId, userId)).limit(1);\n    return result[0];\n  }\n\n  async createToken(insertToken: InsertUltrahumanToken): Promise<UltrahumanToken> {\n    const result = await db.insert(ultrahumanTokens).values(insertToken).returning();\n    return result[0];\n  }\n\n  async updateToken(id: string, updateData: Partial<InsertUltrahumanToken>): Promise<UltrahumanToken | undefined> {\n    const result = await db\n      .update(ultrahumanTokens)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(ultrahumanTokens.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Health Metrics\n  async getMetricsByUserId(userId: string, limit: number = 30): Promise<HealthMetric[]> {\n    return await db\n      .select()\n      .from(healthMetrics)\n      .where(eq(healthMetrics.userId, userId))\n      .orderBy(desc(healthMetrics.date))\n      .limit(limit);\n  }\n\n  async getMetricsByDateRange(userId: string, startDate: Date, endDate: Date): Promise<HealthMetric[]> {\n    return await db\n      .select()\n      .from(healthMetrics)\n      .where(\n        and(\n          eq(healthMetrics.userId, userId),\n          gte(healthMetrics.date, startDate),\n          lte(healthMetrics.date, endDate)\n        )\n      )\n      .orderBy(desc(healthMetrics.date));\n  }\n\n  async createMetric(insertMetric: InsertHealthMetric): Promise<HealthMetric> {\n    const result = await db.insert(healthMetrics).values(insertMetric).returning();\n    return result[0];\n  }\n\n  // Wellness Forecasts\n  async getLatestForecast(userId: string): Promise<WellnessForecast | undefined> {\n    const result = await db\n      .select()\n      .from(wellnessForecasts)\n      .where(eq(wellnessForecasts.userId, userId))\n      .orderBy(desc(wellnessForecasts.generatedAt))\n      .limit(1);\n    return result[0];\n  }\n\n  async createForecast(insertForecast: InsertWellnessForecast): Promise<WellnessForecast> {\n    const result = await db.insert(wellnessForecasts).values(insertForecast).returning();\n    return result[0];\n  }\n\n  // Cycle Tracking\n  async getCyclesByUserId(userId: string, limit: number = 12): Promise<CycleTracking[]> {\n    return await db\n      .select()\n      .from(cycleTracking)\n      .where(eq(cycleTracking.userId, userId))\n      .orderBy(desc(cycleTracking.periodStartDate))\n      .limit(limit);\n  }\n\n  async getLatestCycle(userId: string): Promise<CycleTracking | undefined> {\n    const result = await db\n      .select()\n      .from(cycleTracking)\n      .where(eq(cycleTracking.userId, userId))\n      .orderBy(desc(cycleTracking.periodStartDate))\n      .limit(1);\n    return result[0];\n  }\n\n  async getCycleById(id: string): Promise<CycleTracking | undefined> {\n    const result = await db\n      .select()\n      .from(cycleTracking)\n      .where(eq(cycleTracking.id, id))\n      .limit(1);\n    return result[0];\n  }\n\n  async createCycle(insertCycle: InsertCycleTracking): Promise<CycleTracking> {\n    const result = await db.insert(cycleTracking).values(insertCycle).returning();\n    return result[0];\n  }\n\n  async getCyclesByDateRange(userId: string, startDate: Date, endDate: Date): Promise<CycleTracking[]> {\n    return await db\n      .select()\n      .from(cycleTracking)\n      .where(\n        and(\n          eq(cycleTracking.userId, userId),\n          gte(cycleTracking.periodStartDate, startDate),\n          lte(cycleTracking.periodStartDate, endDate)\n        )\n      )\n      .orderBy(desc(cycleTracking.periodStartDate));\n  }\n\n  async updateCycle(id: string, updateData: Partial<InsertCycleTracking>): Promise<CycleTracking | undefined> {\n    const result = await db\n      .update(cycleTracking)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(cycleTracking.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Health Goals\n  async getGoalsByUserId(userId: string, status?: string): Promise<HealthGoal[]> {\n    const conditions = status \n      ? and(eq(healthGoals.userId, userId), eq(healthGoals.status, status))\n      : eq(healthGoals.userId, userId);\n    \n    return await db\n      .select()\n      .from(healthGoals)\n      .where(conditions)\n      .orderBy(desc(healthGoals.createdAt));\n  }\n\n  async getGoalById(id: string): Promise<HealthGoal | undefined> {\n    const result = await db.select().from(healthGoals).where(eq(healthGoals.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createGoal(insertGoal: InsertHealthGoal): Promise<HealthGoal> {\n    const result = await db.insert(healthGoals).values(insertGoal).returning();\n    return result[0];\n  }\n\n  async updateGoal(id: string, updateData: Partial<InsertHealthGoal>): Promise<HealthGoal | undefined> {\n    const result = await db\n      .update(healthGoals)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(healthGoals.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteGoal(id: string): Promise<void> {\n    await db.delete(healthGoals).where(eq(healthGoals.id, id));\n  }\n}\n\nexport const storage = new DbStorage();\n","size_bytes":7990},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, integer, decimal } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey(),\n  email: text(\"email\").notNull().unique(),\n  name: text(\"name\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const ultrahumanTokens = pgTable(\"ultrahuman_tokens\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  accessToken: text(\"access_token\").notNull(),\n  refreshToken: text(\"refresh_token\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  scope: text(\"scope\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const healthMetrics = pgTable(\"health_metrics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  date: timestamp(\"date\").notNull(),\n  sleepScore: integer(\"sleep_score\"),\n  sleepDuration: decimal(\"sleep_duration\", { precision: 5, scale: 2 }),\n  hrv: integer(\"hrv\"),\n  restingHeartRate: integer(\"resting_heart_rate\"),\n  recoveryScore: integer(\"recovery_score\"),\n  steps: integer(\"steps\"),\n  avgGlucose: decimal(\"avg_glucose\", { precision: 5, scale: 2 }),\n  glucoseVariability: decimal(\"glucose_variability\", { precision: 5, scale: 2 }),\n  temperature: decimal(\"temperature\", { precision: 4, scale: 2 }),\n  vo2Max: decimal(\"vo2_max\", { precision: 5, scale: 2 }),\n  rawData: jsonb(\"raw_data\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const wellnessForecasts = pgTable(\"wellness_forecasts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  forecast: text(\"forecast\").notNull(),\n  insights: jsonb(\"insights\"),\n  recommendations: jsonb(\"recommendations\"),\n  metricsAnalyzed: jsonb(\"metrics_analyzed\"),\n  generatedAt: timestamp(\"generated_at\").defaultNow().notNull(),\n});\n\nexport const cycleTracking = pgTable(\"cycle_tracking\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  periodStartDate: timestamp(\"period_start_date\").notNull(),\n  periodEndDate: timestamp(\"period_end_date\"),\n  cycleLength: integer(\"cycle_length\"),\n  flowIntensity: text(\"flow_intensity\"),\n  symptoms: jsonb(\"symptoms\").$type<string[]>().default(sql`'[]'::jsonb`),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const healthGoals = pgTable(\"health_goals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  goalType: text(\"goal_type\").notNull(),\n  targetMetric: text(\"target_metric\").notNull(),\n  targetValue: decimal(\"target_value\", { precision: 10, scale: 2 }).notNull(),\n  baselineValue: decimal(\"baseline_value\", { precision: 10, scale: 2 }),\n  currentValue: decimal(\"current_value\", { precision: 10, scale: 2 }),\n  deadline: timestamp(\"deadline\"),\n  status: text(\"status\").notNull().default(\"active\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Schema for syncing users from Supabase Auth (includes id)\nexport const syncUserSchema = createInsertSchema(users).omit({\n  createdAt: true,\n});\n\nexport const insertUltrahumanTokenSchema = createInsertSchema(ultrahumanTokens).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertHealthMetricSchema = createInsertSchema(healthMetrics).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWellnessForecastSchema = createInsertSchema(wellnessForecasts).omit({\n  id: true,\n  generatedAt: true,\n});\n\nexport const insertCycleTrackingSchema = createInsertSchema(cycleTracking).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertHealthGoalSchema = createInsertSchema(healthGoals).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateCycleTrackingSchema = createInsertSchema(cycleTracking).partial().omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateHealthGoalSchema = createInsertSchema(healthGoals).partial().omit({\n  id: true,\n  userId: true,\n  baselineValue: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UltrahumanToken = typeof ultrahumanTokens.$inferSelect;\nexport type InsertUltrahumanToken = z.infer<typeof insertUltrahumanTokenSchema>;\nexport type HealthMetric = typeof healthMetrics.$inferSelect;\nexport type InsertHealthMetric = z.infer<typeof insertHealthMetricSchema>;\nexport type WellnessForecast = typeof wellnessForecasts.$inferSelect;\nexport type InsertWellnessForecast = z.infer<typeof insertWellnessForecastSchema>;\nexport type CycleTracking = typeof cycleTracking.$inferSelect;\nexport type InsertCycleTracking = z.infer<typeof insertCycleTrackingSchema>;\nexport type HealthGoal = typeof healthGoals.$inferSelect;\nexport type InsertHealthGoal = z.infer<typeof insertHealthGoalSchema>;\nexport type UpdateCycleTracking = z.infer<typeof updateCycleTrackingSchema>;\nexport type UpdateHealthGoal = z.infer<typeof updateHealthGoalSchema>;\n","size_bytes":5886},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/contexts/ThemeContext\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/auth/Login\";\nimport Signup from \"@/pages/auth/Signup\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Trends from \"@/pages/Trends\";\nimport Goals from \"@/pages/Goals\";\nimport Export from \"@/pages/Export\";\nimport UltrahumanCallback from \"@/pages/UltrahumanCallback\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Login} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/signup\" component={Signup} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/trends\" component={Trends} />\n      <Route path=\"/goals\" component={Goals} />\n      <Route path=\"/export\" component={Export} />\n      <Route path=\"/auth/ultrahuman/callback\" component={UltrahumanCallback} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <ThemeProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </ThemeProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1564},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 240 10% 15%;\n\n  --border: 0 0% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 240 10% 15%;\n\n  --card-border: 0 0% 94%;\n\n  --sidebar: 0 0% 96%;\n\n  --sidebar-foreground: 240 10% 15%;\n\n  --sidebar-border: 0 0% 91%;\n\n  --sidebar-primary: 280 45% 55%;\n\n  --sidebar-primary-foreground: 280 45% 98%;\n\n  --sidebar-accent: 280 15% 92%;\n\n  --sidebar-accent-foreground: 280 20% 25%;\n\n  --sidebar-ring: 280 45% 55%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 240 10% 15%;\n\n  --popover-border: 0 0% 94%;\n\n  --primary: 280 45% 55%;\n\n  --primary-foreground: 280 45% 98%;\n\n  --secondary: 0 0% 93%;\n\n  --secondary-foreground: 240 10% 20%;\n\n  --muted: 280 8% 94%;\n\n  --muted-foreground: 240 5% 45%;\n\n  --accent: 280 12% 93%;\n\n  --accent-foreground: 240 8% 25%;\n\n  --destructive: 0 72% 51%;\n\n  --destructive-foreground: 0 72% 98%;\n\n  --input: 0 0% 75%;\n  --ring: 280 45% 55%;\n  --chart-1: 280 45% 45%;\n  --chart-2: 200 70% 45%;\n  --chart-3: 320 50% 50%;\n  --chart-4: 160 55% 42%;\n  --chart-5: 35 85% 48%;\n\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, Monaco, \"Courier New\", monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(240 10% 15% / 0.04);\n  --shadow-xs: 0px 1px 3px 0px hsl(240 10% 15% / 0.05);\n  --shadow-sm: 0px 2px 4px 0px hsl(240 10% 15% / 0.06), 0px 1px 2px -1px hsl(240 10% 15% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(240 10% 15% / 0.08), 0px 2px 4px -2px hsl(240 10% 15% / 0.05);\n  --shadow-md: 0px 6px 8px -1px hsl(240 10% 15% / 0.08), 0px 3px 6px -2px hsl(240 10% 15% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(240 10% 15% / 0.10), 0px 4px 6px -4px hsl(240 10% 15% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(240 10% 15% / 0.12), 0px 8px 10px -6px hsl(240 10% 15% / 0.06);\n  --shadow-2xl: 0px 25px 50px -12px hsl(240 10% 15% / 0.15);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 240 8% 12%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 240 7% 20%;\n\n  --card: 240 7% 16%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 240 7% 20%;\n\n  --sidebar: 240 7% 14%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 240 7% 18%;\n\n  --sidebar-primary: 280 50% 65%;\n\n  --sidebar-primary-foreground: 280 50% 98%;\n\n  --sidebar-accent: 280 20% 18%;\n\n  --sidebar-accent-foreground: 0 0% 90%;\n\n  --sidebar-ring: 280 50% 65%;\n\n  --popover: 240 7% 18%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 240 7% 22%;\n\n  --primary: 280 50% 60%;\n\n  --primary-foreground: 280 50% 98%;\n\n  --secondary: 240 6% 22%;\n\n  --secondary-foreground: 0 0% 90%;\n\n  --muted: 240 8% 20%;\n\n  --muted-foreground: 0 0% 70%;\n\n  --accent: 280 15% 20%;\n\n  --accent-foreground: 0 0% 88%;\n\n  --destructive: 0 68% 48%;\n\n  --destructive-foreground: 0 68% 98%;\n\n  --input: 240 7% 30%;\n  --ring: 280 50% 65%;\n  --chart-1: 280 50% 70%;\n  --chart-2: 200 70% 65%;\n  --chart-3: 320 55% 68%;\n  --chart-4: 160 55% 62%;\n  --chart-5: 35 80% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.25);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.30), 0px 1px 2px -1px hsl(0 0% 0% / 0.20);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.35), 0px 2px 4px -2px hsl(0 0% 0% / 0.25);\n  --shadow-md: 0px 6px 8px -1px hsl(0 0% 0% / 0.35), 0px 3px 6px -2px hsl(0 0% 0% / 0.30);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.40), 0px 4px 6px -4px hsl(0 0% 0% / 0.25);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.45), 0px 8px 10px -6px hsl(0 0% 0% / 0.30);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.50);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11179},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/db/index.ts":{"content":"import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport * as schema from \"@shared/schema\";\n\nconst DATABASE_URL = process.env.DATABASE_URL;\n\nif (!DATABASE_URL) {\n  throw new Error(\"DATABASE_URL environment variable is required\");\n}\n\n// Debug: Log the DATABASE_URL being used (hide password)\nconst urlMatch = DATABASE_URL.match(/^(postgresql:\\/\\/[^:]+:[^@]+@)([^\\/]+)(\\/.*)?$/);\nif (urlMatch) {\n  console.log(`[DB] Connecting to Supabase host: ${urlMatch[2]}`);\n} else {\n  console.log(`[DB] DATABASE_URL format: ${DATABASE_URL.substring(0, 50)}...`);\n}\n\n// Create Postgres.js client for Supabase\nconst queryClient = postgres(DATABASE_URL, {\n  prepare: false, // Required for Supabase connection pooling\n});\n\nexport const db = drizzle(queryClient, { schema });\n","size_bytes":793},"server/lib/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// Using the OpenAI blueprint integration\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n\nlet openaiClient: OpenAI | null = null;\n\nfunction getOpenAIClient(): OpenAI {\n  if (!process.env.OPENAI_API_KEY) {\n    throw new Error(\"OPENAI_API_KEY environment variable is not configured\");\n  }\n  \n  if (!openaiClient) {\n    openaiClient = new OpenAI({ \n      apiKey: process.env.OPENAI_API_KEY \n    });\n  }\n  \n  return openaiClient;\n}\n\nexport const openai = getOpenAIClient;\n\ninterface HealthData {\n  sleepScore?: number;\n  sleepDuration?: number;\n  hrv?: number;\n  restingHeartRate?: number;\n  recoveryScore?: number;\n  steps?: number;\n  avgGlucose?: number;\n  glucoseVariability?: number;\n  temperature?: number;\n  vo2Max?: number;\n}\n\nexport async function generateWellnessForecast(\n  recentMetrics: HealthData[]\n): Promise<{\n  forecast: string;\n  insights: any;\n  recommendations: string[];\n}> {\n  const metricsText = recentMetrics\n    .map((m, idx) => {\n      return `Day ${idx + 1}: Sleep ${m.sleepScore || 'N/A'}, HRV ${m.hrv || 'N/A'}ms, Recovery ${m.recoveryScore || 'N/A'}, Glucose ${m.avgGlucose || 'N/A'}mg/dL, Steps ${m.steps || 'N/A'}`;\n    })\n    .join('\\n');\n\n  const prompt = `You are a women's health AI advisor specializing in biometric analysis and personalized wellness guidance. Based on the following health metrics from the past week, provide a comprehensive wellness forecast with specific, actionable recommendations.\n\nHealth Metrics:\n${metricsText}\n\nAnalysis Guidelines:\n1. Identify trends and patterns in sleep quality, recovery, glucose, and activity levels\n2. Consider how these metrics interrelate and affect overall wellness\n3. Provide specific, measurable recommendations (not generic advice like \"sleep more\")\n4. Include timing suggestions when relevant (e.g., \"Go to bed by 10 PM\" instead of \"improve sleep schedule\")\n\nPlease provide:\n1. A brief forecast about the user's wellness trajectory (2-3 sentences). Be specific about trends you observe.\n2. Key insights organized by category:\n   - Sleep: Patterns, quality, duration trends\n   - Recovery: HRV trends, stress indicators, recovery adequacy\n   - Metabolism: Glucose stability, energy patterns, activity correlation\n3. 5 actionable recommendations with specific actions the user can take. Each recommendation should:\n   - Start with a specific action verb\n   - Include measurable targets or timeframes when possible\n   - Be personalized to the observed data patterns\n   - Examples: \"Aim for 7.5 hours of sleep by going to bed before 10:30 PM\", \"Take a 15-minute walk after lunch to stabilize afternoon glucose\", \"Schedule recovery days after 3 consecutive high-intensity workouts\"\n\nRespond in JSON format with this structure:\n{\n  \"forecast\": \"string\",\n  \"insights\": {\n    \"sleep\": \"string\",\n    \"recovery\": \"string\", \n    \"metabolism\": \"string\"\n  },\n  \"recommendations\": [\"string\", \"string\", \"string\", \"string\", \"string\"]\n}`;\n\n  try {\n    const client = getOpenAIClient();\n    const response = await client.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a compassionate women's health AI advisor specializing in interpreting biometric data and providing actionable wellness guidance.\",\n        },\n        {\n          role: \"user\",\n          content: prompt,\n        },\n      ],\n      response_format: { type: \"json_object\" },\n      max_tokens: 1000,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    \n    return {\n      forecast: result.forecast || \"Unable to generate forecast at this time.\",\n      insights: result.insights || {},\n      recommendations: result.recommendations || [],\n    };\n  } catch (error) {\n    console.error(\"Error generating wellness forecast:\", error);\n    throw new Error(\"Failed to generate wellness forecast\");\n  }\n}\n","size_bytes":3965},"server/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.SUPABASE_URL || '';\nconst supabaseAnonKey = process.env.SUPABASE_ANON_KEY || '';\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || '';\n\nexport const supabaseAdmin = supabaseServiceKey && supabaseUrl\n  ? createClient(supabaseUrl, supabaseServiceKey, {\n      auth: {\n        autoRefreshToken: false,\n        persistSession: false\n      }\n    })\n  : null;\n\nexport const supabaseClient = supabaseUrl && supabaseAnonKey\n  ? createClient(supabaseUrl, supabaseAnonKey, {\n      auth: {\n        autoRefreshToken: false,\n        persistSession: false\n      }\n    })\n  : null;\n\nexport async function verifySupabaseToken(token: string) {\n  if (!supabaseClient) {\n    throw new Error('Supabase not configured. Please set SUPABASE_URL and SUPABASE_ANON_KEY.');\n  }\n\n  const { data: { user }, error } = await supabaseClient.auth.getUser(token);\n  \n  if (error || !user) {\n    throw new Error('Invalid or expired token');\n  }\n\n  return user;\n}\n","size_bytes":1033},"server/lib/ultrahuman.ts":{"content":"import axios from \"axios\";\n\nconst ULTRAHUMAN_BASE_URL = \"https://partner.ultrahuman.com\";\n\nfunction validateUltrahumanCredentials() {\n  if (!process.env.ULTRAHUMAN_CLIENT_ID || !process.env.ULTRAHUMAN_CLIENT_SECRET) {\n    throw new Error(\"ULTRAHUMAN_CLIENT_ID and ULTRAHUMAN_CLIENT_SECRET are not configured\");\n  }\n}\n\nexport interface TokenResponse {\n  access_token: string;\n  refresh_token: string;\n  token_type: string;\n  expires_in: number;\n  scope: string;\n  created_at: number;\n}\n\nexport async function exchangeCodeForTokens(\n  code: string,\n  redirectUri: string\n): Promise<TokenResponse> {\n  validateUltrahumanCredentials();\n  \n  try {\n    const response = await axios.post(\n      `${ULTRAHUMAN_BASE_URL}/oauth/token`,\n      new URLSearchParams({\n        grant_type: \"authorization_code\",\n        client_id: process.env.ULTRAHUMAN_CLIENT_ID!,\n        client_secret: process.env.ULTRAHUMAN_CLIENT_SECRET!,\n        code,\n        redirect_uri: redirectUri,\n      }).toString(),\n      {\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n      }\n    );\n\n    return response.data;\n  } catch (error: any) {\n    console.error(\"Error exchanging code for tokens:\", error.response?.data || error.message);\n    throw new Error(\"Failed to exchange authorization code\");\n  }\n}\n\nexport async function refreshAccessToken(refreshToken: string): Promise<TokenResponse> {\n  validateUltrahumanCredentials();\n  \n  try {\n    const response = await axios.post(\n      `${ULTRAHUMAN_BASE_URL}/oauth/token`,\n      new URLSearchParams({\n        grant_type: \"refresh_token\",\n        client_id: process.env.ULTRAHUMAN_CLIENT_ID!,\n        client_secret: process.env.ULTRAHUMAN_CLIENT_SECRET!,\n        refresh_token: refreshToken,\n      }).toString(),\n      {\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n      }\n    );\n\n    return response.data;\n  } catch (error: any) {\n    console.error(\"Error refreshing token:\", error.response?.data || error.message);\n    throw new Error(\"Failed to refresh access token\");\n  }\n}\n\nexport async function fetchHealthMetrics(\n  accessToken: string,\n  date: string\n): Promise<any> {\n  try {\n    const response = await axios.get(\n      `${ULTRAHUMAN_BASE_URL}/api/partners/v1/metrics`,\n      {\n        params: { date },\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      }\n    );\n\n    return response.data;\n  } catch (error: any) {\n    if (error.response?.status === 401) {\n      throw new Error(\"TOKEN_EXPIRED\");\n    }\n    console.error(\"Error fetching health metrics:\", error.response?.data || error.message);\n    throw new Error(\"Failed to fetch health metrics\");\n  }\n}\n\nexport async function fetchDailyMetricsWithDirectToken(\n  date: string,\n  email?: string\n): Promise<any> {\n  const accessToken = process.env.ULTRAHUMAN_ACCESS_TOKEN;\n  if (!accessToken) {\n    throw new Error(\"ULTRAHUMAN_ACCESS_TOKEN not configured\");\n  }\n\n  try {\n    const params: any = { date };\n    if (email) {\n      params.email = email;\n    }\n\n    console.log(`[Ultrahuman] Fetching metrics for date: ${date}, email: ${email || 'none'}`);\n    \n    const response = await axios.get(\n      `${ULTRAHUMAN_BASE_URL}/api/v1/partner/daily_metrics`,\n      {\n        params,\n        headers: {\n          Authorization: accessToken,\n        },\n      }\n    );\n\n    console.log(`[Ultrahuman] Response status: ${response.status}, data structure:`, {\n      hasData: !!response.data,\n      dataType: typeof response.data,\n      isArray: Array.isArray(response.data),\n      dataKeys: response.data ? Object.keys(response.data) : [],\n      dataLength: Array.isArray(response.data) ? response.data.length : (response.data?.data ? (Array.isArray(response.data.data) ? response.data.data.length : 'not an array') : 'no data field')\n    });\n\n    // Log actual data content for debugging - show full structure for one date\n    if (response.data?.data?.metrics) {\n      const dates = Object.keys(response.data.data.metrics);\n      if (dates.length > 0) {\n        const firstDate = dates[0];\n        const metricsForDate = response.data.data.metrics[firstDate];\n        console.log(`[Ultrahuman] Full metrics structure for ${firstDate}:`, JSON.stringify(metricsForDate, null, 2));\n      }\n    }\n\n    return response.data;\n  } catch (error: any) {\n    console.error(\"Error fetching daily metrics:\", error.response?.data || error.message);\n    throw new Error(error.response?.data?.message || \"Failed to fetch daily metrics\");\n  }\n}\n","size_bytes":4523},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/contexts/ThemeContext\";\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      className=\"hover-elevate active-elevate-2\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":604},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect } from \"react\";\nimport { initSupabase, getSupabaseClient } from \"@/lib/supabase\";\nimport type { User } from \"@supabase/supabase-js\";\nimport type { SupabaseClient } from \"@supabase/supabase-js\";\n\ninterface AuthContextType {\n  user: User | null;\n  login: (email: string, password: string) => Promise<void>;\n  signup: (email: string, password: string, name?: string) => Promise<void>;\n  logout: () => Promise<void>;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [supabase, setSupabase] = useState<SupabaseClient | null>(null);\n\n  useEffect(() => {\n    let subscription: any;\n    let mounted = true;\n    \n    initSupabase().then(client => {\n      if (!mounted) return;\n      \n      setSupabase(client);\n      \n      client.auth.getSession().then(({ data: { session } }) => {\n        if (!mounted) return;\n        setUser(session?.user ?? null);\n        setIsLoading(false);\n      });\n\n      const {\n        data: { subscription: sub },\n      } = client.auth.onAuthStateChange((_event, session) => {\n        if (!mounted) return;\n        setUser(session?.user ?? null);\n      });\n      \n      subscription = sub;\n    });\n\n    return () => {\n      mounted = false;\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    if (!supabase) throw new Error(\"Supabase not initialized\");\n    \n    const { data, error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n\n    if (error) {\n      throw new Error(error.message);\n    }\n\n    if (data.user && data.session) {\n      const token = data.session.access_token;\n      \n      await fetch(\"/api/users/sync\", {\n        method: \"POST\",\n        headers: { \n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          id: data.user.id,\n          email: data.user.email,\n          name: data.user.user_metadata?.name || \"\",\n        }),\n      });\n    }\n\n    setUser(data.user);\n  };\n\n  const signup = async (email: string, password: string, name?: string) => {\n    if (!supabase) throw new Error(\"Supabase not initialized\");\n    \n    const { data, error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: {\n          name: name || \"\",\n        },\n        emailRedirectTo: window.location.origin + \"/dashboard\",\n      },\n    });\n\n    if (error) {\n      console.error(\"Supabase signup error:\", error);\n      throw new Error(error.message);\n    }\n\n    console.log(\"Signup response:\", { user: data.user, session: !!data.session });\n\n    if (data.user && data.session) {\n      const token = data.session.access_token;\n      \n      const response = await fetch(\"/api/users/sync\", {\n        method: \"POST\",\n        headers: { \n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          id: data.user.id,\n          email: data.user.email,\n          name: name || \"\",\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error(\"User sync error:\", errorData);\n      }\n    } else if (data.user && !data.session) {\n      console.warn(\"User created but no session - email confirmation may be required\");\n    }\n\n    setUser(data.user);\n  };\n\n  const logout = async () => {\n    if (!supabase) return;\n    await supabase.auth.signOut();\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, signup, logout, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":4097},"client/src/contexts/ThemeContext.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const stored = localStorage.getItem(\"theme\");\n    return (stored as Theme) || \"light\";\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme((prev) => (prev === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1086},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { getSupabaseClient } from \"@/lib/supabase\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nasync function getAuthHeaders(): Promise<Record<string, string>> {\n  const supabase = await getSupabaseClient();\n  \n  if (!supabase) {\n    return {};\n  }\n  \n  const { data: { session } } = await supabase.auth.getSession();\n  \n  const headers: Record<string, string> = {};\n  \n  if (session?.access_token) {\n    headers[\"Authorization\"] = `Bearer ${session.access_token}`;\n  }\n  \n  return headers;\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const authHeaders = await getAuthHeaders();\n  const headers = {\n    ...authHeaders,\n    ...(data ? { \"Content-Type\": \"application/json\" } : {}),\n  };\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const authHeaders = await getAuthHeaders();\n    \n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers: authHeaders,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2016},"client/src/lib/supabase.ts":{"content":"import { createClient, SupabaseClient } from '@supabase/supabase-js';\n\nlet supabaseClient: SupabaseClient | null = null;\nlet configPromise: Promise<{ url: string; anonKey: string }> | null = null;\n\nasync function getConfig() {\n  if (!configPromise) {\n    configPromise = fetch('/api/config/supabase').then(async (r) => {\n      if (!r.ok) {\n        const error = await r.json().catch(() => ({ error: 'Failed to load configuration' }));\n        throw new Error(error.error || 'Supabase configuration unavailable');\n      }\n      return r.json();\n    });\n  }\n  return configPromise;\n}\n\nexport async function initSupabase(): Promise<SupabaseClient> {\n  if (!supabaseClient) {\n    const config = await getConfig();\n    supabaseClient = createClient(config.url, config.anonKey);\n  }\n  return supabaseClient;\n}\n\nexport function getSupabaseClient(): SupabaseClient | null {\n  return supabaseClient;\n}\n","size_bytes":893},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { WellnessForecastCard } from \"@/components/dashboard/WellnessForecastCard\";\nimport { MetricCard } from \"@/components/dashboard/MetricCard\";\nimport { HealthMetricsChart } from \"@/components/dashboard/HealthMetricsChart\";\nimport { UltrahumanConnection } from \"@/components/dashboard/UltrahumanConnection\";\nimport { CycleTrackingCard } from \"@/components/dashboard/CycleTrackingCard\";\nimport { CycleTrackingDialog } from \"@/components/cycle/CycleTrackingDialog\";\nimport { Heart, Moon, Activity, Droplet, Thermometer, LogOut, TrendingUp, Target, Download } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { calculateCyclePhase } from \"@/lib/cycleUtils\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n  const { user, logout } = useAuth();\n  const [isSyncing, setIsSyncing] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!user) {\n      setLocation(\"/login\");\n    }\n  }, [user, setLocation]);\n\n  const { data: forecast, isLoading: forecastLoading } = useQuery({\n    queryKey: [\"/api/forecast\", user?.id],\n    enabled: !!user,\n  });\n\n  const { data: metrics, isLoading: metricsLoading } = useQuery({\n    queryKey: [\"/api/metrics\", user?.id],\n    enabled: !!user,\n  });\n\n  const { data: cycle, isLoading: cycleLoading } = useQuery({\n    queryKey: [\"/api/cycles\", user?.id, \"latest\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/cycles/${user?.id}/latest`);\n      if (!response.ok) throw new Error(\"Failed to fetch cycle\");\n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n  const handleConnect = async () => {\n    try {\n      const response = await fetch('/api/config/ultrahuman');\n      if (!response.ok) {\n        toast({\n          variant: \"destructive\",\n          title: \"Configuration error\",\n          description: \"Ultrahuman integration not configured. Please contact support.\",\n        });\n        return;\n      }\n      \n      const config = await response.json();\n      const redirectUri = `${window.location.origin}/auth/ultrahuman/callback`;\n      const scope = \"ring_data cgm_data profile\";\n      \n      localStorage.setItem(\"ultrahuman_state\", user?.id || \"\");\n      \n      const authUrl = `https://partner.ultrahuman.com/oauth/authorize?response_type=code&client_id=${config.clientId}&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${encodeURIComponent(scope)}&state=${user?.id}`;\n      \n      window.location.href = authUrl;\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Connection failed\",\n        description: error.message || \"Failed to connect to Ultrahuman\",\n      });\n    }\n  };\n\n  const handleSync = async () => {\n    if (!user) return;\n    \n    setIsSyncing(true);\n    try {\n      await apiRequest(\"POST\", \"/api/ultrahuman/sync-direct\", { userId: user.id });\n      \n      await queryClient.invalidateQueries({ queryKey: [\"/api/metrics\", user.id] });\n      \n      let cyclePhase;\n      if (cycle?.periodStartDate) {\n        const periodStartDate = new Date(cycle.periodStartDate);\n        const cycleLength = cycle.cycleLength || 28;\n        cyclePhase = calculateCyclePhase(periodStartDate, cycleLength);\n      }\n      \n      await apiRequest(\"POST\", \"/api/forecast/generate\", { \n        userId: user.id,\n        cyclePhase \n      });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/forecast\", user.id] });\n      \n      toast({\n        title: \"Sync successful\",\n        description: \"Your health data has been updated.\",\n      });\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Sync failed\",\n        description: error.message || \"Failed to sync health data\",\n      });\n    } finally {\n      setIsSyncing(false);\n    }\n  };\n\n  const handleLogout = () => {\n    logout();\n    setLocation(\"/login\");\n  };\n\n  if (!user) return null;\n\n  const latestMetric = metrics?.[0];\n  const isConnected = !!metrics && metrics.length > 0;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"border-b border-border bg-card/50 backdrop-blur-sm sticky top-0 z-10\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between gap-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center\">\n                <Heart className=\"w-6 h-6 text-primary\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-heading font-semibold\" data-testid=\"text-app-title\">\n                  Wellness Tracker\n                </h1>\n                <p className=\"text-xs text-muted-foreground hidden sm:block\">\n                  AI-Powered Women's Health\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Link href=\"/trends\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-trends\">\n                  <TrendingUp className=\"w-4 h-4 mr-2\" />\n                  Trends\n                </Button>\n              </Link>\n              <Link href=\"/goals\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-goals\">\n                  <Target className=\"w-4 h-4 mr-2\" />\n                  Goals\n                </Button>\n              </Link>\n              <Link href=\"/export\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-export\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export\n                </Button>\n              </Link>\n              <ThemeToggle />\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleLogout}\n                data-testid=\"button-logout\"\n                className=\"hover-elevate active-elevate-2\"\n              >\n                <LogOut className=\"w-5 h-5\" />\n              </Button>\n              <Avatar data-testid=\"avatar-user\">\n                <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                  U\n                </AvatarFallback>\n              </Avatar>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"space-y-8\">\n          <div>\n            <h2 className=\"text-2xl font-heading font-semibold mb-2\">\n              Welcome back!\n            </h2>\n            <p className=\"text-muted-foreground\">\n              Here's your personalized wellness overview\n            </p>\n          </div>\n\n          <div className=\"grid gap-6 lg:grid-cols-3\">\n            <div className=\"lg:col-span-2 space-y-6\">\n              <WellnessForecastCard forecast={forecast} isLoading={forecastLoading} />\n              \n              <div className=\"grid gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n                <MetricCard\n                  title=\"Sleep Score\"\n                  value={latestMetric?.sleepScore || \"N/A\"}\n                  icon={Moon}\n                  isLoading={metricsLoading}\n                  data-testid=\"card-sleep-score\"\n                />\n                <MetricCard\n                  title=\"HRV\"\n                  value={latestMetric?.hrv || \"N/A\"}\n                  unit=\"ms\"\n                  icon={Heart}\n                  isLoading={metricsLoading}\n                />\n                <MetricCard\n                  title=\"Recovery\"\n                  value={latestMetric?.recoveryScore || \"N/A\"}\n                  icon={Activity}\n                  isLoading={metricsLoading}\n                />\n                <MetricCard\n                  title=\"Avg Glucose\"\n                  value={latestMetric?.avgGlucose ? Number(latestMetric.avgGlucose).toFixed(0) : \"N/A\"}\n                  unit=\"mg/dL\"\n                  icon={Droplet}\n                  isLoading={metricsLoading}\n                />\n                <MetricCard\n                  title=\"Temperature\"\n                  value={latestMetric?.temperature ? Number(latestMetric.temperature).toFixed(1) : \"N/A\"}\n                  unit=\"°F\"\n                  icon={Thermometer}\n                  isLoading={metricsLoading}\n                />\n                <MetricCard\n                  title=\"Steps\"\n                  value={latestMetric?.steps ? (latestMetric.steps > 1000 ? `${(latestMetric.steps / 1000).toFixed(1)}k` : latestMetric.steps) : \"N/A\"}\n                  icon={Activity}\n                  isLoading={metricsLoading}\n                />\n              </div>\n\n              <HealthMetricsChart data={metrics} isLoading={metricsLoading} />\n            </div>\n\n            <div className=\"space-y-6\">\n              <div className=\"flex gap-2\">\n                {user && <CycleTrackingDialog userId={user.id} />}\n              </div>\n              \n              <CycleTrackingCard cycle={cycle} isLoading={cycleLoading} />\n              \n              <UltrahumanConnection\n                isConnected={isConnected}\n                lastSync={isConnected ? new Date().toISOString() : undefined}\n                onConnect={handleConnect}\n                onSync={handleSync}\n                isLoading={isSyncing}\n              />\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":9783},"client/src/pages/UltrahumanCallback.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CheckCircle2, AlertCircle, Loader2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { getSupabaseClient } from \"@/lib/supabase\";\n\nexport default function UltrahumanCallback() {\n  const [, setLocation] = useLocation();\n  const [status, setStatus] = useState<\"loading\" | \"success\" | \"error\">(\"loading\");\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    const handleCallback = async () => {\n      const params = new URLSearchParams(window.location.search);\n      const code = params.get(\"code\");\n      const error = params.get(\"error\");\n      const state = params.get(\"state\");\n\n      if (error) {\n        setStatus(\"error\");\n        setMessage(params.get(\"error_description\") || \"Authorization failed\");\n        return;\n      }\n\n      if (!code) {\n        setStatus(\"error\");\n        setMessage(\"No authorization code received\");\n        return;\n      }\n\n      const userId = state || localStorage.getItem(\"ultrahuman_state\");\n      if (!userId) {\n        setStatus(\"error\");\n        setMessage(\"Invalid session state\");\n        return;\n      }\n\n      try {\n        const supabase = await getSupabaseClient();\n        const { data: { session } } = await supabase.auth.getSession();\n        \n        if (!session) {\n          setStatus(\"error\");\n          setMessage(\"Please log in first\");\n          return;\n        }\n\n        const response = await fetch(\"/api/ultrahuman/callback\", {\n          method: \"POST\",\n          headers: { \n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${session.access_token}`\n          },\n          body: JSON.stringify({ code, userId }),\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || \"Failed to connect\");\n        }\n\n        localStorage.removeItem(\"ultrahuman_state\");\n        setStatus(\"success\");\n        setMessage(\"Successfully connected to Ultrahuman!\");\n        \n        setTimeout(() => {\n          setLocation(\"/dashboard\");\n        }, 2000);\n      } catch (err: any) {\n        setStatus(\"error\");\n        setMessage(err.message || \"Failed to exchange authorization code\");\n      }\n    };\n\n    handleCallback();\n  }, [setLocation]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle className=\"text-center\">\n            {status === \"loading\" && \"Connecting to Ultrahuman...\"}\n            {status === \"success\" && \"Connection Successful!\"}\n            {status === \"error\" && \"Connection Failed\"}\n          </CardTitle>\n          <CardDescription className=\"text-center\">\n            {status === \"loading\" && \"Please wait while we complete the connection\"}\n            {status === \"success\" && \"Redirecting to your dashboard...\"}\n            {status === \"error\" && \"There was a problem connecting your device\"}\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex flex-col items-center gap-4\">\n          {status === \"loading\" && (\n            <Loader2 className=\"w-12 h-12 text-primary animate-spin\" />\n          )}\n          {status === \"success\" && (\n            <CheckCircle2 className=\"w-12 h-12 text-chart-4\" />\n          )}\n          {status === \"error\" && (\n            <>\n              <AlertCircle className=\"w-12 h-12 text-destructive\" />\n              <p className=\"text-sm text-muted-foreground text-center\">{message}</p>\n              <Button\n                onClick={() => setLocation(\"/dashboard\")}\n                variant=\"outline\"\n                className=\"w-full\"\n                data-testid=\"button-back-dashboard\"\n              >\n                Back to Dashboard\n              </Button>\n            </>\n          )}\n          {status === \"success\" && (\n            <p className=\"text-sm text-muted-foreground text-center\">{message}</p>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4199},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/dashboard/HealthMetricsChart.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useState } from \"react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from \"recharts\";\n\ninterface HealthMetricsChartProps {\n  data?: any[];\n  isLoading?: boolean;\n}\n\nexport function HealthMetricsChart({ data, isLoading }: HealthMetricsChartProps) {\n  const [timeRange, setTimeRange] = useState<\"7D\" | \"30D\" | \"90D\">(\"7D\");\n\n  if (isLoading) {\n    return (\n      <Card className=\"shadow-sm\">\n        <CardHeader>\n          <CardTitle className=\"text-xl font-heading\">Health Metrics Trends</CardTitle>\n          <CardDescription>Historical overview of your wellness data</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-80 bg-muted rounded animate-pulse\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const mockData = [\n    { date: \"Mon\", sleep: 75, hrv: 65, recovery: 80, glucose: 95 },\n    { date: \"Tue\", sleep: 82, hrv: 70, recovery: 85, glucose: 92 },\n    { date: \"Wed\", sleep: 68, hrv: 62, recovery: 70, glucose: 98 },\n    { date: \"Thu\", sleep: 78, hrv: 68, recovery: 78, glucose: 90 },\n    { date: \"Fri\", sleep: 85, hrv: 75, recovery: 88, glucose: 88 },\n    { date: \"Sat\", sleep: 90, hrv: 80, recovery: 92, glucose: 85 },\n    { date: \"Sun\", sleep: 88, hrv: 78, recovery: 90, glucose: 87 },\n  ];\n\n  const chartData = data && data.length > 0\n    ? data.slice(0, 7).reverse().map((metric: any) => ({\n        date: new Date(metric.date).toLocaleDateString('en-US', { weekday: 'short' }),\n        sleep: metric.sleepScore || 0,\n        hrv: metric.hrv || 0,\n        recovery: metric.recoveryScore || 0,\n        glucose: metric.avgGlucose ? Number(metric.avgGlucose) : 0,\n      }))\n    : mockData;\n\n  return (\n    <Card className=\"shadow-sm\" data-testid=\"card-health-chart\">\n      <CardHeader>\n        <div className=\"flex items-start justify-between gap-4 flex-wrap\">\n          <div>\n            <CardTitle className=\"text-xl font-heading\">Health Metrics Trends</CardTitle>\n            <CardDescription>Historical overview of your wellness data</CardDescription>\n          </div>\n          <Tabs value={timeRange} onValueChange={(v) => setTimeRange(v as any)}>\n            <TabsList>\n              <TabsTrigger value=\"7D\" data-testid=\"button-range-7d\">7D</TabsTrigger>\n              <TabsTrigger value=\"30D\" data-testid=\"button-range-30d\">30D</TabsTrigger>\n              <TabsTrigger value=\"90D\" data-testid=\"button-range-90d\">90D</TabsTrigger>\n            </TabsList>\n          </Tabs>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={320}>\n          <LineChart data={chartData} margin={{ top: 5, right: 20, left: 0, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" opacity={0.3} />\n            <XAxis \n              dataKey=\"date\" \n              stroke=\"hsl(var(--muted-foreground))\"\n              fontSize={12}\n            />\n            <YAxis \n              stroke=\"hsl(var(--muted-foreground))\"\n              fontSize={12}\n            />\n            <Tooltip\n              contentStyle={{\n                backgroundColor: \"hsl(var(--card))\",\n                border: \"1px solid hsl(var(--border))\",\n                borderRadius: \"8px\",\n                padding: \"8px 12px\",\n              }}\n              labelStyle={{ color: \"hsl(var(--foreground))\" }}\n            />\n            <Legend \n              wrapperStyle={{ fontSize: \"12px\" }}\n              iconType=\"line\"\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"sleep\"\n              stroke=\"hsl(var(--chart-1))\"\n              strokeWidth={2}\n              dot={{ fill: \"hsl(var(--chart-1))\", r: 4 }}\n              activeDot={{ r: 6 }}\n              name=\"Sleep Score\"\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"hrv\"\n              stroke=\"hsl(var(--chart-2))\"\n              strokeWidth={2}\n              dot={{ fill: \"hsl(var(--chart-2))\", r: 4 }}\n              activeDot={{ r: 6 }}\n              name=\"HRV\"\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"recovery\"\n              stroke=\"hsl(var(--chart-3))\"\n              strokeWidth={2}\n              dot={{ fill: \"hsl(var(--chart-3))\", r: 4 }}\n              activeDot={{ r: 6 }}\n              name=\"Recovery\"\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"glucose\"\n              stroke=\"hsl(var(--chart-4))\"\n              strokeWidth={2}\n              dot={{ fill: \"hsl(var(--chart-4))\", r: 4 }}\n              activeDot={{ r: 6 }}\n              name=\"Glucose\"\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4909},"client/src/components/dashboard/MetricCard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { LucideIcon, TrendingUp, TrendingDown } from \"lucide-react\";\n\ninterface MetricCardProps {\n  title: string;\n  value: string | number;\n  unit?: string;\n  icon: LucideIcon;\n  trend?: {\n    value: number;\n    direction: \"up\" | \"down\";\n  };\n  isLoading?: boolean;\n}\n\nexport function MetricCard({ title, value, unit, icon: Icon, trend, isLoading }: MetricCardProps) {\n  if (isLoading) {\n    return (\n      <Card className=\"shadow-sm hover-elevate\">\n        <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n            {title}\n          </CardTitle>\n          <Icon className=\"h-5 w-5 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-8 bg-muted rounded animate-pulse w-24\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"shadow-sm hover-elevate\" data-testid={`card-metric-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n          {title}\n        </CardTitle>\n        <Icon className=\"h-5 w-5 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex items-baseline gap-2\">\n          <div className=\"text-3xl font-semibold\" data-testid={`text-metric-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n            {value}\n          </div>\n          {unit && <span className=\"text-sm text-muted-foreground\">{unit}</span>}\n        </div>\n        {trend && (\n          <div className=\"flex items-center gap-1 mt-2\">\n            {trend.direction === \"up\" ? (\n              <TrendingUp className=\"w-4 h-4 text-chart-4\" />\n            ) : (\n              <TrendingDown className=\"w-4 h-4 text-chart-5\" />\n            )}\n            <span className={`text-xs ${trend.direction === \"up\" ? \"text-chart-4\" : \"text-chart-5\"}`}>\n              {Math.abs(trend.value)}% from last week\n            </span>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2241},"client/src/components/dashboard/UltrahumanConnection.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Activity, CheckCircle2, AlertCircle, RefreshCw } from \"lucide-react\";\n\ninterface UltrahumanConnectionProps {\n  isConnected?: boolean;\n  lastSync?: string;\n  onConnect?: () => void;\n  onSync?: () => void;\n  isLoading?: boolean;\n}\n\nexport function UltrahumanConnection({\n  isConnected = false,\n  lastSync,\n  onConnect,\n  onSync,\n  isLoading = false,\n}: UltrahumanConnectionProps) {\n  if (!isConnected) {\n    return (\n      <Card className=\"shadow-sm border-2 border-primary/20\">\n        <CardHeader>\n          <div className=\"flex items-center gap-2\">\n            <Activity className=\"w-6 h-6 text-primary\" />\n            <CardTitle className=\"text-xl font-heading\">Ultrahuman Data</CardTitle>\n          </div>\n          <CardDescription>\n            Sync your health data from Ultrahuman\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <p className=\"text-sm text-muted-foreground\">\n              Get access to comprehensive health data including:\n            </p>\n            <ul className=\"text-sm text-muted-foreground space-y-1 pl-4\">\n              <li>• Sleep quality and recovery metrics</li>\n              <li>• Heart rate variability (HRV)</li>\n              <li>• Continuous glucose monitoring (CGM)</li>\n              <li>• Movement and activity tracking</li>\n              <li>• Temperature and VO2 Max</li>\n            </ul>\n          </div>\n          <Button \n            className=\"w-full\" \n            onClick={onSync}\n            disabled={isLoading}\n            data-testid=\"button-sync-data\"\n          >\n            <RefreshCw className={`w-4 h-4 mr-2 ${isLoading ? \"animate-spin\" : \"\"}`} />\n            {isLoading ? \"Syncing...\" : \"Sync Data\"}\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader>\n        <div className=\"flex items-start justify-between gap-2 flex-wrap\">\n          <div className=\"flex items-center gap-2\">\n            <Activity className=\"w-6 h-6 text-primary\" />\n            <CardTitle className=\"text-xl font-heading\">Ultrahuman Connected</CardTitle>\n          </div>\n          <Badge className=\"gap-1\" data-testid=\"badge-connection-status\">\n            <CheckCircle2 className=\"w-3 h-3\" />\n            Connected\n          </Badge>\n        </div>\n        <CardDescription>\n          Your health data is syncing automatically\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-muted-foreground\">Last synced</span>\n          <span className=\"text-sm font-medium\" data-testid=\"text-last-sync\">\n            {lastSync ? new Date(lastSync).toLocaleString() : \"Never\"}\n          </span>\n        </div>\n        <Button\n          variant=\"outline\"\n          className=\"w-full\"\n          onClick={onSync}\n          disabled={isLoading}\n          data-testid=\"button-sync-data\"\n        >\n          <RefreshCw className={`w-4 h-4 mr-2 ${isLoading ? \"animate-spin\" : \"\"}`} />\n          {isLoading ? \"Syncing...\" : \"Sync Now\"}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3435},"client/src/components/dashboard/WellnessForecastCard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sparkles, TrendingUp, TrendingDown } from \"lucide-react\";\n\ninterface WellnessForecastCardProps {\n  forecast?: {\n    forecast: string;\n    insights?: any;\n    recommendations?: any;\n    generatedAt: string;\n  };\n  isLoading?: boolean;\n}\n\nexport function WellnessForecastCard({ forecast, isLoading }: WellnessForecastCardProps) {\n  if (isLoading) {\n    return (\n      <Card className=\"shadow-sm border-2 border-primary/20\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-start justify-between gap-2\">\n            <div className=\"flex items-center gap-2\">\n              <Sparkles className=\"w-6 h-6 text-primary\" />\n              <CardTitle className=\"text-xl font-heading\">AI Wellness Forecast</CardTitle>\n            </div>\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              Generating...\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <div className=\"h-4 bg-muted rounded animate-pulse\" />\n            <div className=\"h-4 bg-muted rounded animate-pulse w-3/4\" />\n            <div className=\"h-4 bg-muted rounded animate-pulse w-5/6\" />\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!forecast) {\n    return (\n      <Card className=\"shadow-sm border-2 border-primary/20\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-center gap-2\">\n            <Sparkles className=\"w-6 h-6 text-primary\" />\n            <CardTitle className=\"text-xl font-heading\">AI Wellness Forecast</CardTitle>\n          </div>\n          <CardDescription>\n            Connect your Ultrahuman device to get personalized AI-powered wellness insights\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-muted-foreground\">\n            No forecast available yet. Sync your health data to receive personalized predictions.\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"shadow-sm border-2 border-primary/20 bg-gradient-to-br from-primary/5 via-transparent to-transparent\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-start justify-between gap-2 flex-wrap\">\n          <div className=\"flex items-center gap-2\">\n            <Sparkles className=\"w-6 h-6 text-primary\" />\n            <CardTitle className=\"text-xl font-heading\" data-testid=\"text-forecast-title\">\n              AI Wellness Forecast\n            </CardTitle>\n          </div>\n          <Badge variant=\"secondary\" className=\"text-xs\">\n            Generated by AI\n          </Badge>\n        </div>\n        <CardDescription>\n          Personalized insights based on your recent health metrics\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <p className=\"text-base leading-relaxed\" data-testid=\"text-forecast-content\">\n          {forecast.forecast}\n        </p>\n        \n        {forecast.recommendations && Array.isArray(forecast.recommendations) && forecast.recommendations.length > 0 && (\n          <div className=\"space-y-3 pt-2\">\n            <h4 className=\"text-sm font-semibold\">Personalized Recommendations</h4>\n            <ul className=\"space-y-2\">\n              {forecast.recommendations.map((rec: string, idx: number) => (\n                <li key={idx} className=\"flex items-start gap-2 text-sm\">\n                  <TrendingUp className=\"w-4 h-4 text-primary mt-0.5 flex-shrink-0\" />\n                  <span className=\"leading-relaxed\">{rec}</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        <p className=\"text-xs text-muted-foreground\">\n          Updated {new Date(forecast.generatedAt).toLocaleString()}\n        </p>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3989},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/auth/Login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Heart } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const { toast } = useToast();\n  const { login } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await login(email, password);\n      setLocation(\"/dashboard\");\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Login failed\",\n        description: error.message || \"Please check your credentials and try again.\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-primary/10 mb-4\">\n            <Heart className=\"w-8 h-8 text-primary\" />\n          </div>\n          <h1 className=\"text-3xl font-heading font-semibold text-foreground mb-2\">\n            Welcome Back\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Sign in to your wellness dashboard\n          </p>\n        </div>\n\n        <Card className=\"shadow-md\">\n          <form onSubmit={handleSubmit}>\n            <CardHeader>\n              <CardTitle>Login</CardTitle>\n              <CardDescription>\n                Enter your credentials to access your health insights\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"you@example.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                  data-testid=\"input-email\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  data-testid=\"input-password\"\n                />\n              </div>\n            </CardContent>\n            <CardFooter className=\"flex flex-col gap-4\">\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-login\"\n              >\n                {isLoading ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n              <p className=\"text-sm text-muted-foreground text-center\">\n                Don't have an account?{\" \"}\n                <button\n                  type=\"button\"\n                  onClick={() => setLocation(\"/signup\")}\n                  className=\"text-primary hover:underline\"\n                  data-testid=\"link-signup\"\n                >\n                  Sign up\n                </button>\n              </p>\n            </CardFooter>\n          </form>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3842},"client/src/pages/auth/Signup.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Heart } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\nexport default function Signup() {\n  const [, setLocation] = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const { toast } = useToast();\n  const { signup } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        variant: \"destructive\",\n        title: \"Passwords don't match\",\n        description: \"Please make sure your passwords match.\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      await signup(formData.email, formData.password, formData.name);\n      setLocation(\"/dashboard\");\n    } catch (error: any) {\n      toast({\n        variant: \"destructive\",\n        title: \"Signup failed\",\n        description: error.message || \"An error occurred. Please try again.\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-primary/10 mb-4\">\n            <Heart className=\"w-8 h-8 text-primary\" />\n          </div>\n          <h1 className=\"text-3xl font-heading font-semibold text-foreground mb-2\">\n            Start Your Wellness Journey\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Create an account to track your health metrics\n          </p>\n        </div>\n\n        <Card className=\"shadow-md\">\n          <form onSubmit={handleSubmit}>\n            <CardHeader>\n              <CardTitle>Sign Up</CardTitle>\n              <CardDescription>\n                Create your account to get started\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Name</Label>\n                <Input\n                  id=\"name\"\n                  type=\"text\"\n                  placeholder=\"Your name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  required\n                  data-testid=\"input-name\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"you@example.com\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  required\n                  data-testid=\"input-email\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={formData.password}\n                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                  required\n                  data-testid=\"input-password\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                <Input\n                  id=\"confirmPassword\"\n                  type=\"password\"\n                  value={formData.confirmPassword}\n                  onChange={(e) =>\n                    setFormData({ ...formData, confirmPassword: e.target.value })\n                  }\n                  required\n                  data-testid=\"input-confirm-password\"\n                />\n              </div>\n            </CardContent>\n            <CardFooter className=\"flex flex-col gap-4\">\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-signup\"\n              >\n                {isLoading ? \"Creating account...\" : \"Create Account\"}\n              </Button>\n              <p className=\"text-sm text-muted-foreground text-center\">\n                Already have an account?{\" \"}\n                <button\n                  type=\"button\"\n                  onClick={() => setLocation(\"/login\")}\n                  className=\"text-primary hover:underline\"\n                  data-testid=\"link-login\"\n                >\n                  Sign in\n                </button>\n              </p>\n            </CardFooter>\n          </form>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5214},"client/src/components/cycle/CycleTrackingDialog.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Calendar as CalendarComponent } from \"@/components/ui/calendar\";\nimport { cn } from \"@/lib/utils\";\nimport { format } from \"date-fns\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst cycleFormSchema = z.object({\n  periodStartDate: z.date(),\n  periodEndDate: z.date().optional(),\n  flowIntensity: z.enum(['light', 'medium', 'heavy']).optional(),\n  symptoms: z.array(z.string()).default([]),\n  notes: z.string().optional(),\n});\n\ntype CycleFormData = z.infer<typeof cycleFormSchema>;\n\nconst COMMON_SYMPTOMS = [\n  'Cramps',\n  'Headache',\n  'Mood swings',\n  'Fatigue',\n  'Bloating',\n  'Breast tenderness',\n  'Acne',\n  'Back pain',\n];\n\ninterface CycleTrackingDialogProps {\n  userId: string;\n}\n\nexport function CycleTrackingDialog({ userId }: CycleTrackingDialogProps) {\n  const [open, setOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CycleFormData>({\n    resolver: zodResolver(cycleFormSchema),\n    defaultValues: {\n      periodStartDate: new Date(),\n      symptoms: [],\n    },\n  });\n\n  const createCycleMutation = useMutation({\n    mutationFn: (data: CycleFormData) => {\n      return apiRequest(`/api/cycles`, {\n        method: 'POST',\n        body: JSON.stringify({\n          userId,\n          periodStartDate: data.periodStartDate.toISOString(),\n          periodEndDate: data.periodEndDate?.toISOString(),\n          flowIntensity: data.flowIntensity,\n          symptoms: data.symptoms,\n          notes: data.notes,\n        }),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cycles', userId] });\n      toast({\n        title: \"Cycle tracked\",\n        description: \"Your menstrual cycle data has been recorded.\",\n      });\n      setOpen(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to track cycle. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CycleFormData) => {\n    createCycleMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" data-testid=\"button-track-cycle\">\n          <Calendar className=\"w-4 h-4 mr-2\" />\n          Track Cycle\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Track Menstrual Cycle</DialogTitle>\n          <DialogDescription>\n            Log your cycle details to correlate with health metrics\n          </DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"periodStartDate\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-col\">\n                  <FormLabel>Period Start Date</FormLabel>\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <FormControl>\n                        <Button\n                          variant=\"outline\"\n                          className={cn(\n                            \"pl-3 text-left font-normal\",\n                            !field.value && \"text-muted-foreground\"\n                          )}\n                          data-testid=\"button-period-start-date\"\n                        >\n                          {field.value ? format(field.value, \"PPP\") : <span>Pick a date</span>}\n                          <Calendar className=\"ml-auto h-4 w-4 opacity-50\" />\n                        </Button>\n                      </FormControl>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                      <CalendarComponent\n                        mode=\"single\"\n                        selected={field.value}\n                        onSelect={field.onChange}\n                        disabled={(date) => date > new Date()}\n                      />\n                    </PopoverContent>\n                  </Popover>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"flowIntensity\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Flow Intensity</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-flow-intensity\">\n                        <SelectValue placeholder=\"Select intensity\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"light\">Light</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"heavy\">Heavy</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"symptoms\"\n              render={() => (\n                <FormItem>\n                  <FormLabel>Symptoms</FormLabel>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {COMMON_SYMPTOMS.map((symptom) => (\n                      <FormField\n                        key={symptom}\n                        control={form.control}\n                        name=\"symptoms\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex items-center space-x-2 space-y-0\">\n                            <FormControl>\n                              <Checkbox\n                                checked={field.value?.includes(symptom)}\n                                onCheckedChange={(checked) => {\n                                  return checked\n                                    ? field.onChange([...field.value, symptom])\n                                    : field.onChange(field.value?.filter((s) => s !== symptom));\n                                }}\n                                data-testid={`checkbox-symptom-${symptom.toLowerCase().replace(' ', '-')}`}\n                              />\n                            </FormControl>\n                            <FormLabel className=\"text-sm font-normal cursor-pointer\">\n                              {symptom}\n                            </FormLabel>\n                          </FormItem>\n                        )}\n                      />\n                    ))}\n                  </div>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Notes (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Any additional observations...\"\n                      {...field}\n                      data-testid=\"textarea-cycle-notes\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <DialogFooter>\n              <Button type=\"submit\" disabled={createCycleMutation.isPending} data-testid=\"button-save-cycle\">\n                {createCycleMutation.isPending ? \"Saving...\" : \"Save Cycle\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8675},"client/src/components/dashboard/CycleTrackingCard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CalendarDays } from \"lucide-react\";\nimport { calculateCyclePhase, getCyclePhaseInfo, predictNextPeriod } from \"@/lib/cycleUtils\";\nimport { format, differenceInDays } from \"date-fns\";\nimport type { CycleTracking } from \"@shared/schema\";\n\ninterface CycleTrackingCardProps {\n  cycle?: CycleTracking;\n  isLoading?: boolean;\n}\n\nexport function CycleTrackingCard({ cycle, isLoading }: CycleTrackingCardProps) {\n  if (isLoading) {\n    return (\n      <Card className=\"shadow-sm\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-center gap-2\">\n            <CalendarDays className=\"w-5 h-5 text-primary\" />\n            <CardTitle className=\"text-lg font-heading\">Cycle Tracking</CardTitle>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"h-4 bg-muted rounded animate-pulse\" />\n          <div className=\"h-4 bg-muted rounded animate-pulse w-3/4\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!cycle) {\n    return (\n      <Card className=\"shadow-sm\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-center gap-2\">\n            <CalendarDays className=\"w-5 h-5 text-primary\" />\n            <CardTitle className=\"text-lg font-heading\">Cycle Tracking</CardTitle>\n          </div>\n          <CardDescription>\n            Track your menstrual cycle to correlate with health metrics\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-muted-foreground\">\n            No cycle data recorded yet. Click \"Track Cycle\" to get started.\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const periodStartDate = new Date(cycle.periodStartDate);\n  const cycleLength = cycle.cycleLength || 28;\n  const currentPhase = calculateCyclePhase(periodStartDate, cycleLength);\n  const phaseInfo = getCyclePhaseInfo(currentPhase);\n  const nextPeriodDate = predictNextPeriod(periodStartDate, cycleLength);\n  const daysUntilNextPeriod = differenceInDays(nextPeriodDate, new Date());\n\n  return (\n    <Card className={`shadow-sm ${phaseInfo.bgColor} border-2`}>\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-start justify-between gap-2 flex-wrap\">\n          <div className=\"flex items-center gap-2\">\n            <CalendarDays className=\"w-5 h-5 text-primary\" />\n            <CardTitle className=\"text-lg font-heading\" data-testid=\"text-cycle-title\">\n              Cycle Tracking\n            </CardTitle>\n          </div>\n          <Badge variant=\"outline\" className={phaseInfo.color} data-testid=\"badge-cycle-phase\">\n            {phaseInfo.name} Phase\n          </Badge>\n        </div>\n        <CardDescription>{phaseInfo.description}</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-sm\">\n            <span className=\"text-muted-foreground\">Last Period</span>\n            <span className=\"font-medium\" data-testid=\"text-last-period\">\n              {format(periodStartDate, \"MMM d, yyyy\")}\n            </span>\n          </div>\n          \n          <div className=\"flex justify-between text-sm\">\n            <span className=\"text-muted-foreground\">Next Period</span>\n            <span className=\"font-medium\" data-testid=\"text-next-period\">\n              {daysUntilNextPeriod > 0 \n                ? `in ${daysUntilNextPeriod} days` \n                : `${Math.abs(daysUntilNextPeriod)} days overdue`}\n            </span>\n          </div>\n\n          {cycle.flowIntensity && (\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Flow Intensity</span>\n              <span className=\"font-medium capitalize\" data-testid=\"text-flow-intensity\">\n                {cycle.flowIntensity}\n              </span>\n            </div>\n          )}\n\n          {cycle.symptoms && Array.isArray(cycle.symptoms) && cycle.symptoms.length > 0 && (\n            <div className=\"pt-2\">\n              <span className=\"text-sm text-muted-foreground\">Symptoms:</span>\n              <div className=\"flex flex-wrap gap-1 mt-1\">\n                {cycle.symptoms.map((symptom, idx) => (\n                  <Badge key={idx} variant=\"secondary\" className=\"text-xs\">\n                    {symptom}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {cycle.notes && (\n          <div className=\"pt-2 border-t\">\n            <p className=\"text-sm text-muted-foreground italic\" data-testid=\"text-cycle-notes\">\n              \"{cycle.notes}\"\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4868},"client/src/components/goals/GoalCard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Edit, CheckCircle2, Calendar, TrendingUp } from \"lucide-react\";\nimport { format, differenceInDays } from \"date-fns\";\nimport type { HealthGoal } from \"@shared/schema\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface GoalCardProps {\n  goal: HealthGoal;\n  onEdit: (goal: HealthGoal) => void;\n}\n\nconst METRIC_LABELS: Record<string, string> = {\n  sleepScore: \"Sleep Score\",\n  hrv: \"HRV\",\n  recoveryScore: \"Recovery Score\",\n  steps: \"Steps\",\n  avgGlucose: \"Average Glucose\",\n  temperature: \"Temperature\",\n};\n\nexport function GoalCard({ goal, onEdit }: GoalCardProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const markCompleteMutation = useMutation({\n    mutationFn: () => {\n      return apiRequest(`/api/goals/${goal.id}`, {\n        method: 'PATCH',\n        body: JSON.stringify({ status: 'completed' }),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/goals\"] });\n      toast({\n        title: \"Goal completed!\",\n        description: \"Congratulations on achieving your health goal!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to mark goal as completed\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const currentValue = goal.currentValue ? Number(goal.currentValue) : 0;\n  const targetValue = Number(goal.targetValue);\n  const baselineValue = goal.baselineValue ? Number(goal.baselineValue) : currentValue;\n  \n  let progress = 0;\n  let goalAchieved = false;\n  \n  if (goal.goalType === 'improve') {\n    progress = Math.min((currentValue / targetValue) * 100, 100);\n    goalAchieved = currentValue >= targetValue;\n  } else if (goal.goalType === 'reduce') {\n    const targetReduction = baselineValue - targetValue;\n    const currentReduction = baselineValue - currentValue;\n    progress = targetReduction > 0 ? Math.min((currentReduction / targetReduction) * 100, 100) : 0;\n    goalAchieved = currentValue <= targetValue;\n  } else {\n    const tolerance = targetValue * 0.05;\n    const difference = Math.abs(currentValue - targetValue);\n    progress = difference <= tolerance ? 100 : Math.max(0, 100 - (difference / targetValue) * 100);\n    goalAchieved = difference <= tolerance;\n  }\n  \n  const isCompleted = goal.status === 'completed';\n  \n  const daysLeft = goal.deadline \n    ? differenceInDays(new Date(goal.deadline), new Date())\n    : null;\n\n  return (\n    <Card className={`shadow-sm ${isCompleted ? 'bg-green-50 dark:bg-green-950/20' : ''}`}>\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-start justify-between gap-2 flex-wrap\">\n          <div className=\"flex-1 min-w-0\">\n            <CardTitle className=\"text-lg font-heading\" data-testid={`text-goal-title-${goal.id}`}>\n              {METRIC_LABELS[goal.targetMetric] || goal.targetMetric}\n            </CardTitle>\n            <CardDescription className=\"mt-1\">{goal.description}</CardDescription>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant={isCompleted ? \"default\" : \"secondary\"} className=\"shrink-0\">\n              {goal.goalType}\n            </Badge>\n            {!isCompleted && (\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => onEdit(goal)}\n                data-testid={`button-edit-goal-${goal.id}`}\n              >\n                <Edit className=\"w-4 h-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-muted-foreground\">Progress</span>\n            <span className=\"font-medium\" data-testid={`text-goal-progress-${goal.id}`}>\n              {currentValue.toFixed(0)} / {targetValue.toFixed(0)}\n            </span>\n          </div>\n          <Progress value={progress} className=\"h-2\" />\n          <p className=\"text-xs text-muted-foreground\">\n            {progress.toFixed(0)}% complete\n          </p>\n        </div>\n\n        {daysLeft !== null && !isCompleted && (\n          <div className=\"flex items-center gap-2 text-sm\">\n            <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n            <span className=\"text-muted-foreground\">\n              {daysLeft > 0 \n                ? `${daysLeft} days left`\n                : daysLeft === 0\n                ? 'Due today'\n                : `${Math.abs(daysLeft)} days overdue`\n              }\n            </span>\n          </div>\n        )}\n\n        {goal.deadline && (\n          <div className=\"text-xs text-muted-foreground\">\n            Target date: {format(new Date(goal.deadline), \"MMM d, yyyy\")}\n          </div>\n        )}\n\n        {!isCompleted && goalAchieved && (\n          <Button\n            className=\"w-full\"\n            onClick={() => markCompleteMutation.mutate()}\n            disabled={markCompleteMutation.isPending}\n            data-testid={`button-complete-goal-${goal.id}`}\n          >\n            <CheckCircle2 className=\"w-4 h-4 mr-2\" />\n            {markCompleteMutation.isPending ? \"Marking...\" : \"Mark as Completed\"}\n          </Button>\n        )}\n\n        {isCompleted && (\n          <div className=\"flex items-center gap-2 text-green-600 dark:text-green-400\">\n            <CheckCircle2 className=\"w-5 h-5\" />\n            <span className=\"font-medium\">Goal Achieved!</span>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5900},"client/src/components/goals/GoalDialog.tsx":{"content":"import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { cn } from \"@/lib/utils\";\nimport { format } from \"date-fns\";\nimport { Calendar as CalendarIcon } from \"lucide-react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useEffect } from \"react\";\nimport type { HealthGoal } from \"@shared/schema\";\n\nconst goalFormSchema = z.object({\n  goalType: z.enum(['improve', 'maintain', 'reduce']),\n  targetMetric: z.string().min(1, \"Please select a metric\"),\n  targetValue: z.string().min(1, \"Target value is required\"),\n  currentValue: z.string().optional(),\n  deadline: z.date().optional(),\n  description: z.string().optional(),\n});\n\ntype GoalFormData = z.infer<typeof goalFormSchema>;\n\ninterface GoalDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  goal?: HealthGoal;\n  userId: string;\n}\n\nconst METRICS = [\n  { value: 'sleepScore', label: 'Sleep Score' },\n  { value: 'hrv', label: 'HRV (Heart Rate Variability)' },\n  { value: 'recoveryScore', label: 'Recovery Score' },\n  { value: 'steps', label: 'Daily Steps' },\n  { value: 'avgGlucose', label: 'Average Glucose' },\n  { value: 'temperature', label: 'Body Temperature' },\n];\n\nexport function GoalDialog({ open, onOpenChange, goal, userId }: GoalDialogProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: metrics } = useQuery({\n    queryKey: [\"/api/metrics\", userId],\n    enabled: !!userId && open,\n  });\n\n  const form = useForm<GoalFormData>({\n    resolver: zodResolver(goalFormSchema),\n    defaultValues: {\n      goalType: 'improve',\n      targetMetric: '',\n      targetValue: '',\n      currentValue: '',\n      description: '',\n    },\n  });\n\n  useEffect(() => {\n    if (goal) {\n      form.reset({\n        goalType: goal.goalType as 'improve' | 'maintain' | 'reduce',\n        targetMetric: goal.targetMetric,\n        targetValue: goal.targetValue?.toString() || '',\n        currentValue: goal.currentValue?.toString() || '',\n        deadline: goal.deadline ? new Date(goal.deadline) : undefined,\n        description: goal.description || '',\n      });\n    } else {\n      form.reset({\n        goalType: 'improve',\n        targetMetric: '',\n        targetValue: '',\n        currentValue: '',\n        description: '',\n      });\n      \n      if (metrics && metrics.length > 0) {\n        const latestMetric = metrics[0];\n        const selectedMetric = form.watch('targetMetric');\n        if (selectedMetric && latestMetric[selectedMetric as keyof typeof latestMetric]) {\n          const currentVal = latestMetric[selectedMetric as keyof typeof latestMetric];\n          form.setValue('currentValue', currentVal?.toString() || '');\n        }\n      }\n    }\n  }, [goal, form, metrics]);\n\n  const createGoalMutation = useMutation({\n    mutationFn: (data: GoalFormData) => {\n      const currentVal = data.currentValue ? parseFloat(data.currentValue) : null;\n      \n      if (goal) {\n        const updatePayload = {\n          targetValue: parseFloat(data.targetValue),\n          currentValue: currentVal,\n          deadline: data.deadline?.toISOString(),\n          description: data.description,\n        };\n        \n        return apiRequest(`/api/goals/${goal.id}`, {\n          method: 'PATCH',\n          body: JSON.stringify(updatePayload),\n        });\n      }\n      \n      const createPayload = {\n        userId,\n        goalType: data.goalType,\n        targetMetric: data.targetMetric,\n        targetValue: parseFloat(data.targetValue),\n        baselineValue: currentVal,\n        currentValue: currentVal,\n        deadline: data.deadline?.toISOString(),\n        description: data.description,\n        status: 'active',\n      };\n      \n      return apiRequest(`/api/goals`, {\n        method: 'POST',\n        body: JSON.stringify(createPayload),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/goals\"] });\n      toast({\n        title: goal ? \"Goal updated\" : \"Goal created\",\n        description: goal ? \"Your health goal has been updated.\" : \"Your health goal has been created.\",\n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: goal ? \"Failed to update goal\" : \"Failed to create goal\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: GoalFormData) => {\n    createGoalMutation.mutate(data);\n  };\n\n  const watchedMetric = form.watch('targetMetric');\n  useEffect(() => {\n    if (watchedMetric && metrics && metrics.length > 0 && !goal) {\n      const latestMetric = metrics[0];\n      const currentVal = latestMetric[watchedMetric as keyof typeof latestMetric];\n      if (currentVal) {\n        form.setValue('currentValue', currentVal.toString());\n      }\n    }\n  }, [watchedMetric, metrics, form, goal]);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>{goal ? 'Edit Goal' : 'Create New Goal'}</DialogTitle>\n          <DialogDescription>\n            Set a health target and track your progress over time\n          </DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"goalType\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Goal Type</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-goal-type\">\n                        <SelectValue placeholder=\"Select goal type\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"improve\">Improve</SelectItem>\n                      <SelectItem value=\"maintain\">Maintain</SelectItem>\n                      <SelectItem value=\"reduce\">Reduce</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"targetMetric\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Target Metric</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-target-metric\">\n                        <SelectValue placeholder=\"Select metric to track\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {METRICS.map((metric) => (\n                        <SelectItem key={metric.value} value={metric.value}>\n                          {metric.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"currentValue\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Current Value</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        step=\"0.01\"\n                        {...field}\n                        data-testid=\"input-current-value\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"targetValue\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Target Value</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        step=\"0.01\"\n                        {...field}\n                        data-testid=\"input-target-value\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"deadline\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-col\">\n                  <FormLabel>Deadline (Optional)</FormLabel>\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <FormControl>\n                        <Button\n                          variant=\"outline\"\n                          className={cn(\n                            \"pl-3 text-left font-normal\",\n                            !field.value && \"text-muted-foreground\"\n                          )}\n                          data-testid=\"button-deadline\"\n                        >\n                          {field.value ? format(field.value, \"PPP\") : <span>Pick a date</span>}\n                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                        </Button>\n                      </FormControl>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                      <Calendar\n                        mode=\"single\"\n                        selected={field.value}\n                        onSelect={field.onChange}\n                        disabled={(date) => date < new Date()}\n                      />\n                    </PopoverContent>\n                  </Popover>\n                  <FormDescription>\n                    Set a target date to achieve your goal\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Why is this goal important to you?\"\n                      {...field}\n                      data-testid=\"textarea-description\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <DialogFooter>\n              <Button \n                type=\"submit\" \n                disabled={createGoalMutation.isPending}\n                data-testid=\"button-save-goal\"\n              >\n                {createGoalMutation.isPending ? \"Saving...\" : goal ? \"Update Goal\" : \"Create Goal\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11962},"client/src/components/trends/AnomalyDetector.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { AlertTriangle, TrendingDown, TrendingUp } from \"lucide-react\";\nimport type { HealthMetric } from \"@shared/schema\";\nimport { format, parseISO } from \"date-fns\";\n\ninterface AnomalyDetectorProps {\n  metrics?: HealthMetric[];\n  isLoading?: boolean;\n  preview?: boolean;\n}\n\ninterface Anomaly {\n  date: string;\n  metric: string;\n  value: number;\n  severity: 'high' | 'medium' | 'low';\n  type: 'spike' | 'drop';\n  message: string;\n}\n\nfunction detectAnomalies(metrics: HealthMetric[]): Anomaly[] {\n  const anomalies: Anomaly[] = [];\n  \n  if (metrics.length < 3) return anomalies;\n\n  const metricKeys = ['sleepScore', 'hrv', 'recoveryScore', 'avgGlucose'] as const;\n\n  metricKeys.forEach((key) => {\n    const values = metrics\n      .slice(0, 30)\n      .map(m => {\n        const val = m[key];\n        return typeof val === 'number' ? val : parseFloat(String(val)) || 0;\n      })\n      .filter(v => v > 0);\n\n    if (values.length < 3) return;\n\n    const mean = values.reduce((a, b) => a + b, 0) / values.length;\n    const variance = values.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / values.length;\n    const stdDev = Math.sqrt(variance);\n\n    if (stdDev === 0) return;\n\n    metrics.slice(0, 10).forEach((metric) => {\n      const value = metric[key];\n      const numValue = typeof value === 'number' ? value : parseFloat(String(value)) || 0;\n      \n      if (numValue === 0) return;\n\n      const zScore = Math.abs((numValue - mean) / stdDev);\n\n      if (zScore > 2) {\n        const type = numValue > mean ? 'spike' : 'drop';\n        const severity = zScore > 3 ? 'high' : zScore > 2.5 ? 'medium' : 'low';\n        \n        const metricName = key === 'hrv' ? 'HRV' : \n                          key === 'avgGlucose' ? 'Glucose' :\n                          key === 'sleepScore' ? 'Sleep Score' : 'Recovery';\n\n        anomalies.push({\n          date: metric.date,\n          metric: metricName,\n          value: numValue,\n          severity,\n          type,\n          message: `${metricName} ${type === 'spike' ? 'unusually high' : 'unusually low'} at ${numValue.toFixed(1)}`,\n        });\n      }\n    });\n  });\n\n  return anomalies.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n}\n\nexport function AnomalyDetector({ metrics, isLoading, preview = false }: AnomalyDetectorProps) {\n  if (isLoading) {\n    return <div className=\"text-sm text-muted-foreground\">Analyzing data...</div>;\n  }\n\n  if (!metrics || metrics.length < 3) {\n    return (\n      <div className=\"text-sm text-muted-foreground\">\n        Not enough data for anomaly detection\n      </div>\n    );\n  }\n\n  const anomalies = detectAnomalies(metrics);\n  const displayedAnomalies = preview ? anomalies.slice(0, 3) : anomalies;\n\n  if (anomalies.length === 0) {\n    return (\n      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n        <div className=\"w-8 h-8 rounded-full bg-green-500/10 flex items-center justify-center\">\n          <TrendingUp className=\"w-4 h-4 text-green-500\" />\n        </div>\n        <span>No anomalies detected - your metrics are stable!</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-3\">\n      {displayedAnomalies.map((anomaly, idx) => (\n        <div\n          key={idx}\n          className=\"flex items-start gap-3 p-3 rounded-lg bg-muted/50 hover-elevate\"\n          data-testid={`anomaly-${idx}`}\n        >\n          <div className={`mt-0.5 ${\n            anomaly.severity === 'high' ? 'text-red-500' :\n            anomaly.severity === 'medium' ? 'text-orange-500' :\n            'text-yellow-500'\n          }`}>\n            {anomaly.type === 'spike' ? (\n              <TrendingUp className=\"w-5 h-5\" />\n            ) : (\n              <TrendingDown className=\"w-5 h-5\" />\n            )}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-start justify-between gap-2 flex-wrap\">\n              <p className=\"text-sm font-medium\">{anomaly.message}</p>\n              <Badge \n                variant={anomaly.severity === 'high' ? 'destructive' : 'secondary'}\n                className=\"shrink-0\"\n              >\n                {anomaly.severity}\n              </Badge>\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {format(parseISO(anomaly.date), \"MMM d, yyyy\")}\n            </p>\n          </div>\n        </div>\n      ))}\n      \n      {preview && anomalies.length > 3 && (\n        <p className=\"text-xs text-muted-foreground text-center pt-2\">\n          +{anomalies.length - 3} more anomalies detected\n        </p>\n      )}\n    </div>\n  );\n}\n","size_bytes":4636},"client/src/components/trends/CorrelationHeatmap.tsx":{"content":"import type { HealthMetric } from \"@shared/schema\";\n\ninterface CorrelationHeatmapProps {\n  metrics?: HealthMetric[];\n  isLoading?: boolean;\n}\n\nconst METRICS = [\n  { key: 'sleepScore', label: 'Sleep' },\n  { key: 'hrv', label: 'HRV' },\n  { key: 'recoveryScore', label: 'Recovery' },\n  { key: 'avgGlucose', label: 'Glucose' },\n  { key: 'temperature', label: 'Temp' },\n];\n\nfunction calculateCorrelation(x: number[], y: number[]): number {\n  if (x.length !== y.length || x.length === 0) return 0;\n  \n  const n = x.length;\n  const meanX = x.reduce((a, b) => a + b, 0) / n;\n  const meanY = y.reduce((a, b) => a + b, 0) / n;\n  \n  let numerator = 0;\n  let denomX = 0;\n  let denomY = 0;\n  \n  for (let i = 0; i < n; i++) {\n    const diffX = x[i] - meanX;\n    const diffY = y[i] - meanY;\n    numerator += diffX * diffY;\n    denomX += diffX * diffX;\n    denomY += diffY * diffY;\n  }\n  \n  if (denomX === 0 || denomY === 0) return 0;\n  \n  return numerator / Math.sqrt(denomX * denomY);\n}\n\nfunction getCorrelationColor(value: number): string {\n  if (value > 0.7) return 'bg-green-500';\n  if (value > 0.4) return 'bg-green-400';\n  if (value > 0.1) return 'bg-green-300';\n  if (value > -0.1) return 'bg-gray-300';\n  if (value > -0.4) return 'bg-red-300';\n  if (value > -0.7) return 'bg-red-400';\n  return 'bg-red-500';\n}\n\nexport function CorrelationHeatmap({ metrics, isLoading }: CorrelationHeatmapProps) {\n  if (isLoading) {\n    return <div className=\"text-sm text-muted-foreground\">Calculating correlations...</div>;\n  }\n\n  if (!metrics || metrics.length < 5) {\n    return (\n      <div className=\"text-sm text-muted-foreground\">\n        Not enough data for correlation analysis (need at least 5 data points)\n      </div>\n    );\n  }\n\n  const metricData: Record<string, number[]> = {};\n  \n  METRICS.forEach(({ key }) => {\n    metricData[key] = metrics\n      .slice(0, 30)\n      .map(m => {\n        const val = m[key as keyof HealthMetric];\n        return typeof val === 'number' ? val : parseFloat(String(val)) || 0;\n      })\n      .filter(v => v > 0);\n  });\n\n  const correlations: Record<string, Record<string, number>> = {};\n  \n  METRICS.forEach(({ key: key1 }) => {\n    correlations[key1] = {};\n    METRICS.forEach(({ key: key2 }) => {\n      if (key1 === key2) {\n        correlations[key1][key2] = 1;\n      } else {\n        const minLength = Math.min(metricData[key1].length, metricData[key2].length);\n        if (minLength > 0) {\n          correlations[key1][key2] = calculateCorrelation(\n            metricData[key1].slice(0, minLength),\n            metricData[key2].slice(0, minLength)\n          );\n        } else {\n          correlations[key1][key2] = 0;\n        }\n      }\n    });\n  });\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full border-collapse\">\n          <thead>\n            <tr>\n              <th className=\"p-2\"></th>\n              {METRICS.map(({ label }) => (\n                <th key={label} className=\"p-2 text-xs font-medium text-muted-foreground\">\n                  {label}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {METRICS.map(({ key: key1, label: label1 }) => (\n              <tr key={key1}>\n                <td className=\"p-2 text-xs font-medium text-muted-foreground\">\n                  {label1}\n                </td>\n                {METRICS.map(({ key: key2 }) => {\n                  const correlation = correlations[key1]?.[key2] || 0;\n                  return (\n                    <td key={key2} className=\"p-1\">\n                      <div\n                        className={`w-12 h-12 rounded flex items-center justify-center text-xs font-medium ${\n                          key1 === key2 ? 'bg-primary/20' : getCorrelationColor(correlation)\n                        }`}\n                        data-testid={`correlation-${key1}-${key2}`}\n                      >\n                        {key1 === key2 ? '1.0' : correlation.toFixed(2)}\n                      </div>\n                    </td>\n                  );\n                })}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      \n      <div className=\"flex items-center gap-4 text-xs text-muted-foreground pt-4 border-t\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-4 h-4 rounded bg-green-500\"></div>\n          <span>Strong positive</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-4 h-4 rounded bg-gray-300\"></div>\n          <span>No correlation</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-4 h-4 rounded bg-red-500\"></div>\n          <span>Strong negative</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4793},"client/src/components/trends/HistoricalChart.tsx":{"content":"import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { format, parseISO } from \"date-fns\";\nimport type { HealthMetric } from \"@shared/schema\";\n\ninterface HistoricalChartProps {\n  data?: HealthMetric[];\n  metricKeys: string[];\n  isLoading?: boolean;\n}\n\nconst METRIC_CONFIG: Record<string, { name: string; color: string; unit?: string }> = {\n  sleepScore: { name: \"Sleep Score\", color: \"#8b5cf6\" },\n  hrv: { name: \"HRV\", color: \"#3b82f6\", unit: \"ms\" },\n  recoveryScore: { name: \"Recovery\", color: \"#10b981\" },\n  avgGlucose: { name: \"Avg Glucose\", color: \"#f59e0b\", unit: \"mg/dL\" },\n  temperature: { name: \"Temperature\", color: \"#ef4444\", unit: \"°F\" },\n  steps: { name: \"Steps\", color: \"#06b6d4\" },\n};\n\nexport function HistoricalChart({ data, metricKeys, isLoading }: HistoricalChartProps) {\n  if (isLoading) {\n    return (\n      <div className=\"h-[300px] flex items-center justify-center\">\n        <div className=\"text-muted-foreground\">Loading chart data...</div>\n      </div>\n    );\n  }\n\n  if (!data || data.length === 0) {\n    return (\n      <div className=\"h-[300px] flex items-center justify-center\">\n        <div className=\"text-muted-foreground\">No data available</div>\n      </div>\n    );\n  }\n\n  const chartData = data\n    .slice(0, 30)\n    .reverse()\n    .map((metric) => ({\n      date: format(parseISO(metric.date), \"MMM d\"),\n      ...metricKeys.reduce((acc, key) => {\n        const value = metric[key as keyof HealthMetric];\n        acc[key] = typeof value === 'number' ? value : parseFloat(String(value)) || 0;\n        return acc;\n      }, {} as Record<string, number>),\n    }));\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <LineChart data={chartData} margin={{ top: 5, right: 20, left: 0, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n        <XAxis \n          dataKey=\"date\" \n          className=\"text-xs fill-muted-foreground\"\n          tick={{ fill: 'currentColor' }}\n        />\n        <YAxis \n          className=\"text-xs fill-muted-foreground\"\n          tick={{ fill: 'currentColor' }}\n        />\n        <Tooltip \n          contentStyle={{ \n            backgroundColor: 'hsl(var(--card))',\n            border: '1px solid hsl(var(--border))',\n            borderRadius: '0.5rem',\n          }}\n          labelStyle={{ color: 'hsl(var(--foreground))' }}\n        />\n        <Legend \n          wrapperStyle={{ \n            paddingTop: '1rem',\n          }}\n        />\n        {metricKeys.map((key) => {\n          const config = METRIC_CONFIG[key];\n          return (\n            <Line\n              key={key}\n              type=\"monotone\"\n              dataKey={key}\n              name={config?.name || key}\n              stroke={config?.color || \"#8b5cf6\"}\n              strokeWidth={2}\n              dot={false}\n              activeDot={{ r: 4 }}\n            />\n          );\n        })}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}\n","size_bytes":2986},"client/src/components/trends/TrendInsights.tsx":{"content":"import { TrendingUp, TrendingDown, Minus } from \"lucide-react\";\nimport type { HealthMetric, CycleTracking } from \"@shared/schema\";\n\ninterface TrendInsightsProps {\n  metrics?: HealthMetric[];\n  cycle?: CycleTracking;\n  isLoading?: boolean;\n}\n\ninterface Insight {\n  metric: string;\n  trend: 'up' | 'down' | 'stable';\n  change: number;\n  message: string;\n}\n\nfunction calculateTrend(data: number[]): { trend: 'up' | 'down' | 'stable'; change: number } {\n  if (data.length < 2) return { trend: 'stable', change: 0 };\n  \n  const recent = data.slice(0, 3).reduce((a, b) => a + b, 0) / Math.min(3, data.length);\n  const older = data.slice(3, 7).reduce((a, b) => a + b, 0) / Math.min(4, data.slice(3, 7).length);\n  \n  const change = ((recent - older) / older) * 100;\n  \n  if (Math.abs(change) < 5) return { trend: 'stable', change };\n  return { trend: change > 0 ? 'up' : 'down', change };\n}\n\nexport function TrendInsights({ metrics, cycle, isLoading }: TrendInsightsProps) {\n  if (isLoading) {\n    return <div className=\"text-sm text-muted-foreground\">Generating insights...</div>;\n  }\n\n  if (!metrics || metrics.length < 4) {\n    return (\n      <div className=\"text-sm text-muted-foreground\">\n        Track more data to see personalized insights\n      </div>\n    );\n  }\n\n  const insights: Insight[] = [];\n\n  const sleepData = metrics.map(m => Number(m.sleepScore) || 0).filter(v => v > 0);\n  const hrvData = metrics.map(m => Number(m.hrv) || 0).filter(v => v > 0);\n  const recoveryData = metrics.map(m => Number(m.recoveryScore) || 0).filter(v => v > 0);\n\n  if (sleepData.length >= 4) {\n    const { trend, change } = calculateTrend(sleepData);\n    insights.push({\n      metric: 'Sleep Quality',\n      trend,\n      change,\n      message: trend === 'up' \n        ? `Your sleep quality has improved by ${Math.abs(change).toFixed(0)}%`\n        : trend === 'down'\n        ? `Your sleep quality has decreased by ${Math.abs(change).toFixed(0)}%`\n        : 'Your sleep quality remains consistent',\n    });\n  }\n\n  if (hrvData.length >= 4) {\n    const { trend, change } = calculateTrend(hrvData);\n    insights.push({\n      metric: 'Heart Rate Variability',\n      trend,\n      change,\n      message: trend === 'up'\n        ? `Your HRV is trending upward by ${Math.abs(change).toFixed(0)}% - great recovery!`\n        : trend === 'down'\n        ? `Your HRV has decreased by ${Math.abs(change).toFixed(0)}% - consider more rest`\n        : 'Your HRV is stable',\n    });\n  }\n\n  if (recoveryData.length >= 4) {\n    const { trend, change } = calculateTrend(recoveryData);\n    insights.push({\n      metric: 'Recovery',\n      trend,\n      change,\n      message: trend === 'up'\n        ? `Recovery improving by ${Math.abs(change).toFixed(0)}%`\n        : trend === 'down'\n        ? `Recovery declining by ${Math.abs(change).toFixed(0)}%`\n        : 'Recovery levels are stable',\n    });\n  }\n\n  if (cycle) {\n    const periodStart = new Date(cycle.periodStartDate);\n    const daysSince = Math.floor((Date.now() - periodStart.getTime()) / (1000 * 60 * 60 * 24));\n    const cycleLength = cycle.cycleLength || 28;\n    \n    if (daysSince >= 0 && daysSince <= cycleLength) {\n      let cycleMessage = '';\n      if (daysSince < 5) {\n        cycleMessage = 'You may experience lower energy during menstruation';\n      } else if (daysSince < 14) {\n        cycleMessage = 'Your energy levels typically peak during the follicular phase';\n      } else if (daysSince < 16) {\n        cycleMessage = 'Ovulation phase - optimal time for intense workouts';\n      } else {\n        cycleMessage = 'Luteal phase - focus on rest and recovery';\n      }\n      \n      insights.push({\n        metric: 'Cycle Phase',\n        trend: 'stable',\n        change: 0,\n        message: cycleMessage,\n      });\n    }\n  }\n\n  if (insights.length === 0) {\n    return (\n      <div className=\"text-sm text-muted-foreground\">\n        No significant trends detected yet\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-3\">\n      {insights.map((insight, idx) => (\n        <div key={idx} className=\"flex items-start gap-3\" data-testid={`insight-${idx}`}>\n          <div className={`mt-0.5 ${\n            insight.trend === 'up' ? 'text-green-500' :\n            insight.trend === 'down' ? 'text-red-500' :\n            'text-muted-foreground'\n          }`}>\n            {insight.trend === 'up' ? (\n              <TrendingUp className=\"w-5 h-5\" />\n            ) : insight.trend === 'down' ? (\n              <TrendingDown className=\"w-5 h-5\" />\n            ) : (\n              <Minus className=\"w-5 h-5\" />\n            )}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium\">{insight.metric}</p>\n            <p className=\"text-sm text-muted-foreground\">{insight.message}</p>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":4823},"client/src/lib/cycleUtils.ts":{"content":"export type CyclePhase = 'menstrual' | 'follicular' | 'ovulation' | 'luteal';\n\nexport function calculateCyclePhase(periodStartDate: Date, avgCycleLength: number = 28): CyclePhase {\n  const today = new Date();\n  const dayOfCycle = Math.floor((today.getTime() - periodStartDate.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n  \n  if (dayOfCycle <= 5) {\n    return 'menstrual';\n  } else if (dayOfCycle <= 13) {\n    return 'follicular';\n  } else if (dayOfCycle <= 16) {\n    return 'ovulation';\n  } else {\n    return 'luteal';\n  }\n}\n\nexport function getCyclePhaseInfo(phase: CyclePhase) {\n  const phaseInfo = {\n    menstrual: {\n      name: 'Menstrual',\n      description: 'Period phase - energy may be lower, focus on rest and gentle movement',\n      color: 'text-red-500',\n      bgColor: 'bg-red-50 dark:bg-red-950/30',\n    },\n    follicular: {\n      name: 'Follicular',\n      description: 'Energy building phase - great time for new projects and intense workouts',\n      color: 'text-blue-500',\n      bgColor: 'bg-blue-50 dark:bg-blue-950/30',\n    },\n    ovulation: {\n      name: 'Ovulation',\n      description: 'Peak energy phase - optimal for high-intensity activities and socializing',\n      color: 'text-green-500',\n      bgColor: 'bg-green-50 dark:bg-green-950/30',\n    },\n    luteal: {\n      name: 'Luteal',\n      description: 'Energy winding down - time for self-care and lighter activities',\n      color: 'text-purple-500',\n      bgColor: 'bg-purple-50 dark:bg-purple-950/30',\n    },\n  };\n\n  return phaseInfo[phase];\n}\n\nexport function predictNextPeriod(lastPeriodDate: Date, avgCycleLength: number = 28): Date {\n  const nextPeriod = new Date(lastPeriodDate);\n  nextPeriod.setDate(nextPeriod.getDate() + avgCycleLength);\n  return nextPeriod;\n}\n","size_bytes":1743},"client/src/pages/Goals.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Target, ArrowLeft, Plus, TrendingUp, Download, Home } from \"lucide-react\";\nimport { GoalCard } from \"@/components/goals/GoalCard\";\nimport { GoalDialog } from \"@/components/goals/GoalDialog\";\nimport { useState } from \"react\";\nimport type { HealthGoal } from \"@shared/schema\";\n\nexport default function Goals() {\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingGoal, setEditingGoal] = useState<HealthGoal | undefined>();\n\n  useEffect(() => {\n    if (!user) {\n      setLocation(\"/login\");\n    }\n  }, [user, setLocation]);\n\n  const { data: activeGoals, isLoading: activeLoading } = useQuery<HealthGoal[]>({\n    queryKey: [\"/api/goals\", user?.id, \"active\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/goals/${user?.id}?status=active`);\n      if (!response.ok) throw new Error(\"Failed to fetch goals\");\n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n  const { data: completedGoals, isLoading: completedLoading } = useQuery<HealthGoal[]>({\n    queryKey: [\"/api/goals\", user?.id, \"completed\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/goals/${user?.id}?status=completed`);\n      if (!response.ok) throw new Error(\"Failed to fetch goals\");\n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n  const handleCreateGoal = () => {\n    setEditingGoal(undefined);\n    setDialogOpen(true);\n  };\n\n  const handleEditGoal = (goal: HealthGoal) => {\n    setEditingGoal(goal);\n    setDialogOpen(true);\n  };\n\n  if (!user) return null;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"space-y-8\">\n          <div>\n            <div className=\"flex items-center justify-between mb-4\">\n              <Link href=\"/dashboard\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back-dashboard\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Dashboard\n                </Button>\n              </Link>\n              <div className=\"flex items-center gap-2\">\n                <Link href=\"/dashboard\">\n                  <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-nav-dashboard\">\n                    <Home className=\"w-4 h-4 mr-2\" />\n                    Dashboard\n                  </Button>\n                </Link>\n                <Link href=\"/trends\">\n                  <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-nav-trends\">\n                    <TrendingUp className=\"w-4 h-4 mr-2\" />\n                    Trends\n                  </Button>\n                </Link>\n                <Link href=\"/export\">\n                  <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-nav-export\">\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Export\n                  </Button>\n                </Link>\n              </div>\n            </div>\n            <div className=\"flex items-start justify-between gap-4 flex-wrap\">\n              <div>\n                <h1 className=\"text-3xl font-heading font-bold flex items-center gap-3\">\n                  <Target className=\"w-8 h-8 text-primary\" />\n                  Health Goals\n                </h1>\n                <p className=\"text-muted-foreground mt-2\">\n                  Set and track your personalized health targets\n                </p>\n              </div>\n              <Button onClick={handleCreateGoal} data-testid=\"button-create-goal\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                New Goal\n              </Button>\n            </div>\n          </div>\n\n          <Tabs defaultValue=\"active\" className=\"space-y-6\">\n            <TabsList>\n              <TabsTrigger value=\"active\" data-testid=\"tab-active-goals\">\n                Active Goals\n                {activeGoals && activeGoals.length > 0 && (\n                  <span className=\"ml-2 bg-primary/20 text-primary px-2 py-0.5 rounded-full text-xs\">\n                    {activeGoals.length}\n                  </span>\n                )}\n              </TabsTrigger>\n              <TabsTrigger value=\"completed\" data-testid=\"tab-completed-goals\">\n                Completed\n                {completedGoals && completedGoals.length > 0 && (\n                  <span className=\"ml-2 bg-green-500/20 text-green-500 px-2 py-0.5 rounded-full text-xs\">\n                    {completedGoals.length}\n                  </span>\n                )}\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"active\" className=\"space-y-4\">\n              {activeLoading ? (\n                <div className=\"grid gap-4 md:grid-cols-2\">\n                  {[1, 2].map((i) => (\n                    <div key={i} className=\"h-48 bg-muted rounded-lg animate-pulse\" />\n                  ))}\n                </div>\n              ) : activeGoals && activeGoals.length > 0 ? (\n                <div className=\"grid gap-4 md:grid-cols-2\">\n                  {activeGoals.map((goal) => (\n                    <GoalCard \n                      key={goal.id} \n                      goal={goal} \n                      onEdit={handleEditGoal}\n                    />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <Target className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium mb-2\">No active goals yet</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Create your first health goal to start tracking progress\n                  </p>\n                  <Button onClick={handleCreateGoal} data-testid=\"button-create-first-goal\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Create Your First Goal\n                  </Button>\n                </div>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"completed\" className=\"space-y-4\">\n              {completedLoading ? (\n                <div className=\"grid gap-4 md:grid-cols-2\">\n                  {[1, 2].map((i) => (\n                    <div key={i} className=\"h-48 bg-muted rounded-lg animate-pulse\" />\n                  ))}\n                </div>\n              ) : completedGoals && completedGoals.length > 0 ? (\n                <div className=\"grid gap-4 md:grid-cols-2\">\n                  {completedGoals.map((goal) => (\n                    <GoalCard \n                      key={goal.id} \n                      goal={goal}\n                      onEdit={handleEditGoal}\n                    />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <div className=\"text-muted-foreground\">\n                    No completed goals yet\n                  </div>\n                </div>\n              )}\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n\n      <GoalDialog\n        open={dialogOpen}\n        onOpenChange={(open) => {\n          setDialogOpen(open);\n          if (!open) setEditingGoal(undefined);\n        }}\n        goal={editingGoal}\n        userId={user.id}\n      />\n    </div>\n  );\n}\n","size_bytes":7565},"client/src/pages/Trends.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { TrendingUp, Activity, Moon, Heart, Droplet, Thermometer, ArrowLeft, Target, Download, Home } from \"lucide-react\";\nimport { HistoricalChart } from \"@/components/trends/HistoricalChart\";\nimport { AnomalyDetector } from \"@/components/trends/AnomalyDetector\";\nimport { CorrelationHeatmap } from \"@/components/trends/CorrelationHeatmap\";\nimport { TrendInsights } from \"@/components/trends/TrendInsights\";\n\nexport default function Trends() {\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n\n  useEffect(() => {\n    if (!user) {\n      setLocation(\"/login\");\n    }\n  }, [user, setLocation]);\n\n  const { data: metrics, isLoading: metricsLoading } = useQuery({\n    queryKey: [\"/api/metrics\", user?.id],\n    enabled: !!user,\n  });\n\n  const { data: cycle } = useQuery({\n    queryKey: [\"/api/cycles\", user?.id, \"latest\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/cycles/${user?.id}/latest`);\n      if (!response.ok) throw new Error(\"Failed to fetch cycle\");\n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n  if (!user) return null;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"space-y-8\">\n          <div>\n            <div className=\"flex items-center justify-between mb-4\">\n              <Link href=\"/dashboard\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back-dashboard\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Dashboard\n                </Button>\n              </Link>\n              <div className=\"flex items-center gap-2\">\n                <Link href=\"/dashboard\">\n                  <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-nav-dashboard\">\n                    <Home className=\"w-4 h-4 mr-2\" />\n                    Dashboard\n                  </Button>\n                </Link>\n                <Link href=\"/goals\">\n                  <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-nav-goals\">\n                    <Target className=\"w-4 h-4 mr-2\" />\n                    Goals\n                  </Button>\n                </Link>\n                <Link href=\"/export\">\n                  <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-nav-export\">\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Export\n                  </Button>\n                </Link>\n              </div>\n            </div>\n            <h1 className=\"text-3xl font-heading font-bold flex items-center gap-3\">\n              <TrendingUp className=\"w-8 h-8 text-primary\" />\n              Health Trends & Analysis\n            </h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Discover patterns in your health data over time\n            </p>\n          </div>\n\n          <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-4 lg:w-auto\">\n              <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">\n                Overview\n              </TabsTrigger>\n              <TabsTrigger value=\"metrics\" data-testid=\"tab-metrics\">\n                Metrics\n              </TabsTrigger>\n              <TabsTrigger value=\"correlations\" data-testid=\"tab-correlations\">\n                Correlations\n              </TabsTrigger>\n              <TabsTrigger value=\"anomalies\" data-testid=\"tab-anomalies\">\n                Anomalies\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-6\">\n              <div className=\"grid gap-6 lg:grid-cols-2\">\n                <Card className=\"shadow-sm\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"w-5 h-5 text-primary\" />\n                      Key Insights\n                    </CardTitle>\n                    <CardDescription>\n                      AI-powered analysis of your health trends\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <TrendInsights \n                      metrics={metrics} \n                      cycle={cycle}\n                      isLoading={metricsLoading} \n                    />\n                  </CardContent>\n                </Card>\n\n                <Card className=\"shadow-sm\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Activity className=\"w-5 h-5 text-primary\" />\n                      Recent Anomalies\n                    </CardTitle>\n                    <CardDescription>\n                      Unusual patterns detected in your data\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <AnomalyDetector \n                      metrics={metrics} \n                      isLoading={metricsLoading}\n                      preview={true}\n                    />\n                  </CardContent>\n                </Card>\n              </div>\n\n              <Card className=\"shadow-sm\">\n                <CardHeader>\n                  <CardTitle>30-Day Overview</CardTitle>\n                  <CardDescription>\n                    Your key health metrics over the past month\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <HistoricalChart \n                    data={metrics} \n                    metricKeys={['sleepScore', 'hrv', 'recoveryScore']}\n                    isLoading={metricsLoading}\n                  />\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"metrics\" className=\"space-y-6\">\n              <div className=\"grid gap-6\">\n                <Card className=\"shadow-sm\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Moon className=\"w-5 h-5 text-primary\" />\n                      Sleep & Recovery Trends\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <HistoricalChart \n                      data={metrics} \n                      metricKeys={['sleepScore', 'recoveryScore']}\n                      isLoading={metricsLoading}\n                    />\n                  </CardContent>\n                </Card>\n\n                <Card className=\"shadow-sm\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Heart className=\"w-5 h-5 text-primary\" />\n                      Heart Rate Variability\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <HistoricalChart \n                      data={metrics} \n                      metricKeys={['hrv']}\n                      isLoading={metricsLoading}\n                    />\n                  </CardContent>\n                </Card>\n\n                <Card className=\"shadow-sm\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Droplet className=\"w-5 h-5 text-primary\" />\n                      Glucose & Temperature\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <HistoricalChart \n                      data={metrics} \n                      metricKeys={['avgGlucose', 'temperature']}\n                      isLoading={metricsLoading}\n                    />\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"correlations\" className=\"space-y-6\">\n              <Card className=\"shadow-sm\">\n                <CardHeader>\n                  <CardTitle>Metric Correlations</CardTitle>\n                  <CardDescription>\n                    Discover how your health metrics relate to each other\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <CorrelationHeatmap \n                    metrics={metrics} \n                    isLoading={metricsLoading}\n                  />\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"anomalies\" className=\"space-y-6\">\n              <Card className=\"shadow-sm\">\n                <CardHeader>\n                  <CardTitle>Anomaly Detection</CardTitle>\n                  <CardDescription>\n                    Identifying unusual patterns in your health data\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <AnomalyDetector \n                    metrics={metrics} \n                    isLoading={metricsLoading}\n                    preview={false}\n                  />\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":9512},"server/lib/supabase-edge.ts":{"content":"interface HealthMetrics {\n  date: string;\n  hrvScore?: number;\n  sleepScore?: number;\n  glucoseLevel?: number;\n  steps?: number;\n  calories?: number;\n  restingHeartRate?: number;\n}\n\ninterface ForecastRequest {\n  userId: string;\n  metrics: HealthMetrics[];\n  cyclePhase?: string;\n}\n\ninterface ForecastResponse {\n  forecast: string;\n  recommendations?: string[] | null;\n  insights?: any | null;\n}\n\nexport async function callGenerateForecastEdgeFunction(\n  accessToken: string,\n  request: ForecastRequest\n): Promise<ForecastResponse> {\n  const supabaseUrl = process.env.SUPABASE_URL;\n  const functionUrl = `${supabaseUrl}/functions/v1/generate-forecast`;\n\n  const response = await fetch(functionUrl, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${accessToken}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(request),\n  });\n\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n    throw new Error(`Edge function error: ${errorData.error || response.statusText}`);\n  }\n\n  const data = await response.json();\n  return data;\n}\n","size_bytes":1129},"supabase/functions/README.md":{"content":"# Supabase Edge Functions\n\nThis directory contains Supabase Edge Functions for the Women's Health Tracker application.\n\n## Functions\n\n### generate-forecast\n\nAI-powered wellness forecast generator that securely calls OpenAI with user health metrics.\n\n**Endpoint:** `/functions/v1/generate-forecast`\n\n**Method:** POST\n\n**Authentication:** Required (Supabase Auth Bearer token)\n\n**Request Body:**\n```json\n{\n  \"userId\": \"user-uuid\",\n  \"metrics\": [\n    {\n      \"date\": \"2025-01-01\",\n      \"hrvScore\": 65,\n      \"sleepScore\": 80,\n      \"glucoseLevel\": 95,\n      \"steps\": 8500,\n      \"restingHeartRate\": 62\n    }\n  ],\n  \"cyclePhase\": \"follicular\"\n}\n```\n\n**Response:**\n```json\n{\n  \"forecast\": \"AI-generated wellness forecast text...\"\n}\n```\n\n## Deployment\n\n### Prerequisites\n\n1. Install Supabase CLI:\n```bash\nnpm install -g supabase\n```\n\n2. Login to Supabase:\n```bash\nsupabase login\n```\n\n3. Link your project:\n```bash\nsupabase link --project-ref <your-project-ref>\n```\n\n### Set Secrets\n\nThe edge function requires the following secrets:\n\n```bash\nsupabase secrets set OPENAI_API_KEY=<your-openai-api-key>\nsupabase secrets set SUPABASE_URL=<your-supabase-url>\nsupabase secrets set SUPABASE_ANON_KEY=<your-supabase-anon-key>\n```\n\n### Deploy Functions\n\nDeploy all functions:\n```bash\nsupabase functions deploy\n```\n\nDeploy specific function:\n```bash\nsupabase functions deploy generate-forecast\n```\n\n### Local Development\n\nRun functions locally:\n```bash\nsupabase functions serve\n```\n\nRun specific function:\n```bash\nsupabase functions serve generate-forecast --env-file .env.local\n```\n\nCreate `.env.local` in the project root with:\n```\nOPENAI_API_KEY=your-key-here\nSUPABASE_URL=your-supabase-url\nSUPABASE_ANON_KEY=your-anon-key\n```\n\n## Enable Edge Functions in Application\n\nOnce deployed, enable edge functions by setting the environment variable:\n\n```\nUSE_EDGE_FUNCTIONS=true\n```\n\nThis will make the backend use Supabase Edge Functions for AI forecasting instead of direct OpenAI calls.\n\n## Security\n\n- **Authentication**: Edge functions validate user authentication via Supabase Auth using the anon key with user's bearer token\n  - The Supabase client is initialized with the anon key but inherits the user's auth context from the Authorization header\n  - This approach ensures Row Level Security (RLS) policies are enforced\n  - Using service role key would bypass RLS and is not recommended for user-facing functions\n- **Authorization**: Each function verifies that the userId in the request matches the authenticated user\n- **API Keys**: OpenAI API key is stored securely in Supabase secrets, never exposed to the client\n- **Validation**: Request payloads are validated for required fields and proper structure\n- All requests require valid Supabase authentication tokens\n","size_bytes":2758},"supabase/functions/generate-forecast/index.ts":{"content":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\"\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2'\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n}\n\ninterface HealthMetrics {\n  date: string;\n  hrvScore?: number;\n  sleepScore?: number;\n  glucoseLevel?: number;\n  steps?: number;\n  calories?: number;\n  restingHeartRate?: number;\n}\n\ninterface ForecastRequest {\n  userId: string;\n  metrics: HealthMetrics[];\n  cyclePhase?: string;\n}\n\nserve(async (req) => {\n  if (req.method === 'OPTIONS') {\n    return new Response('ok', { headers: corsHeaders })\n  }\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_ANON_KEY') ?? '',\n      {\n        global: {\n          headers: { Authorization: req.headers.get('Authorization')! },\n        },\n      }\n    )\n\n    const {\n      data: { user },\n    } = await supabaseClient.auth.getUser()\n\n    if (!user) {\n      return new Response(JSON.stringify({ error: 'Unauthorized' }), {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        status: 401,\n      })\n    }\n\n    const requestData: ForecastRequest = await req.json()\n\n    if (requestData.userId !== user.id) {\n      return new Response(JSON.stringify({ error: 'Forbidden' }), {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        status: 403,\n      })\n    }\n\n    if (!requestData.metrics || requestData.metrics.length === 0) {\n      return new Response(JSON.stringify({ error: 'No metrics provided' }), {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        status: 400,\n      })\n    }\n\n    const openAIKey = Deno.env.get('OPENAI_API_KEY')\n    if (!openAIKey) {\n      throw new Error('OpenAI API key not configured')\n    }\n\n    const prompt = buildForecastPrompt(requestData.metrics, requestData.cyclePhase)\n\n    const openAIResponse = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${openAIKey}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'gpt-4',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a women\\'s health AI assistant specializing in analyzing biometric data to provide personalized wellness forecasts. Focus on patterns in HRV, sleep, glucose, and activity metrics. Consider menstrual cycle impacts on health metrics.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.7,\n        max_tokens: 800,\n      }),\n    })\n\n    if (!openAIResponse.ok) {\n      const errorData = await openAIResponse.json()\n      throw new Error(`OpenAI API error: ${JSON.stringify(errorData)}`)\n    }\n\n    const openAIData = await openAIResponse.json()\n    const forecastText = openAIData.choices[0]?.message?.content\n\n    if (!forecastText) {\n      throw new Error('No forecast generated')\n    }\n\n    const lines = forecastText.split('\\n').filter((line: string) => line.trim())\n    const recommendations: string[] = []\n    let mainForecast = forecastText\n\n    lines.forEach((line: string) => {\n      if (line.match(/^[-*•]\\s+/) || line.match(/^\\d+\\.\\s+/)) {\n        recommendations.push(line.replace(/^[-*•]\\s+/, '').replace(/^\\d+\\.\\s+/, '').trim())\n      }\n    })\n\n    return new Response(\n      JSON.stringify({ \n        forecast: mainForecast,\n        recommendations: recommendations.length > 0 ? recommendations : null,\n        insights: null\n      }),\n      {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        status: 200,\n      },\n    )\n  } catch (error) {\n    return new Response(\n      JSON.stringify({ error: error.message }),\n      {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        status: 500,\n      },\n    )\n  }\n})\n\nfunction buildForecastPrompt(metrics: HealthMetrics[], cyclePhase?: string): string {\n  let prompt = 'Analyze the following health metrics and provide a personalized wellness forecast:\\n\\n'\n  \n  prompt += 'Recent Metrics:\\n'\n  metrics.forEach((metric, index) => {\n    prompt += `Day ${index + 1} (${metric.date}):\\n`\n    if (metric.hrvScore) prompt += `  - HRV Score: ${metric.hrvScore}\\n`\n    if (metric.sleepScore) prompt += `  - Sleep Score: ${metric.sleepScore}\\n`\n    if (metric.glucoseLevel) prompt += `  - Glucose Level: ${metric.glucoseLevel} mg/dL\\n`\n    if (metric.steps) prompt += `  - Steps: ${metric.steps}\\n`\n    if (metric.calories) prompt += `  - Calories Burned: ${metric.calories}\\n`\n    if (metric.restingHeartRate) prompt += `  - Resting Heart Rate: ${metric.restingHeartRate} bpm\\n`\n    prompt += '\\n'\n  })\n\n  if (cyclePhase) {\n    prompt += `Current Menstrual Cycle Phase: ${cyclePhase}\\n\\n`\n  }\n\n  prompt += 'Please provide:\\n'\n  prompt += '1. Overall health trend assessment\\n'\n  prompt += '2. Key patterns or anomalies detected\\n'\n  prompt += '3. Personalized recommendations for the next 3-7 days\\n'\n  prompt += '4. Specific advice related to current cycle phase (if applicable)\\n'\n  prompt += '5. Areas to monitor closely\\n'\n  \n  return prompt\n}\n","size_bytes":5292},"client/src/pages/Export.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { getSupabaseClient } from \"@/lib/supabase\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { format, subMonths } from \"date-fns\";\nimport { Download, Calendar as CalendarIcon } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Export() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [startDate, setStartDate] = useState<Date>(subMonths(new Date(), 3));\n  const [endDate, setEndDate] = useState<Date>(new Date());\n  const [isExporting, setIsExporting] = useState(false);\n\n  const handleExport = async (type: 'metrics' | 'goals' | 'cycles') => {\n    if (!user) return;\n\n    setIsExporting(true);\n    try {\n      const supabase = await getSupabaseClient();\n      const { data: { session } } = await supabase.auth.getSession();\n      \n      if (!session?.access_token) {\n        throw new Error(\"Not authenticated\");\n      }\n\n      let url = \"\";\n      const startStr = startDate.toISOString().split('T')[0];\n      const endStr = endDate.toISOString().split('T')[0];\n\n      switch (type) {\n        case 'metrics':\n          url = `/api/export/metrics/${user.id}?startDate=${startStr}&endDate=${endStr}`;\n          break;\n        case 'goals':\n          url = `/api/export/goals/${user.id}`;\n          break;\n        case 'cycles':\n          url = `/api/export/cycles/${user.id}?startDate=${startStr}&endDate=${endStr}`;\n          break;\n      }\n\n      const response = await fetch(url, {\n        headers: {\n          'Authorization': `Bearer ${session.access_token}`\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Export failed\");\n      }\n\n      const blob = await response.blob();\n      const downloadUrl = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = downloadUrl;\n      \n      const contentDisposition = response.headers.get('Content-Disposition');\n      const filename = contentDisposition \n        ? contentDisposition.split('filename=')[1].replace(/\"/g, '')\n        : `export-${type}-${Date.now()}.csv`;\n      \n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(downloadUrl);\n\n      toast({\n        title: \"Export successful\",\n        description: `Your ${type} data has been downloaded.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Export failed\",\n        description: \"There was an error exporting your data. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold mb-2\">Export Your Health Data</h1>\n        <p className=\"text-muted-foreground\">\n          Download your health data in CSV format for your records or to share with healthcare providers.\n        </p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Date Range Selection</CardTitle>\n          <CardDescription>\n            Select the date range for exporting your health metrics and cycle tracking data\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label>Start Date</Label>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full justify-start text-left\"\n                    data-testid=\"button-start-date\"\n                  >\n                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                    {format(startDate, \"PPP\")}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={startDate}\n                    onSelect={(date) => date && setStartDate(date)}\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>End Date</Label>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full justify-start text-left\"\n                    data-testid=\"button-end-date\"\n                  >\n                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                    {format(endDate, \"PPP\")}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={endDate}\n                    onSelect={(date) => date && setEndDate(date)}\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Health Metrics</CardTitle>\n            <CardDescription>\n              Export sleep, HRV, glucose, and other health metrics\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button\n              className=\"w-full\"\n              onClick={() => handleExport('metrics')}\n              disabled={isExporting}\n              data-testid=\"button-export-metrics\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Metrics\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Health Goals</CardTitle>\n            <CardDescription>\n              Export all your health goals and progress tracking\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button\n              className=\"w-full\"\n              onClick={() => handleExport('goals')}\n              disabled={isExporting}\n              data-testid=\"button-export-goals\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Goals\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Cycle Tracking</CardTitle>\n            <CardDescription>\n              Export menstrual cycle data and symptoms\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button\n              className=\"w-full\"\n              onClick={() => handleExport('cycles')}\n              disabled={isExporting}\n              data-testid=\"button-export-cycles\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Cycles\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>About Your Data Export</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-2 text-sm text-muted-foreground\">\n          <p>\n            All exports are in CSV (Comma-Separated Values) format, which can be opened with:\n          </p>\n          <ul className=\"list-disc list-inside space-y-1 ml-2\">\n            <li>Microsoft Excel, Google Sheets, or Apple Numbers</li>\n            <li>Medical records systems and health apps</li>\n            <li>Data analysis tools like R or Python</li>\n          </ul>\n          <p className=\"mt-4\">\n            Your exported data includes only information from the selected date range. Health Goals export includes all goals regardless of date range.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8205}},"version":1}