import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Sparkles, TrendingUp, TrendingDown } from "lucide-react";

interface WellnessForecastCardProps {
  forecast?: {
    forecast: string;
    insights?: any;
    recommendations?: any;
    generatedAt: string;
  };
  isLoading?: boolean;
}

export function WellnessForecastCard({ forecast, isLoading }: WellnessForecastCardProps) {
  if (isLoading) {
    return (
      <Card className="shadow-sm border-2 border-primary/20">
        <CardHeader className="pb-4">
          <div className="flex items-start justify-between gap-2">
            <div className="flex items-center gap-2">
              <Sparkles className="w-6 h-6 text-primary" />
              <CardTitle className="text-xl font-heading">AI Wellness Forecast</CardTitle>
            </div>
            <Badge variant="secondary" className="text-xs">
              Generating...
            </Badge>
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <div className="h-4 bg-muted rounded animate-pulse" />
            <div className="h-4 bg-muted rounded animate-pulse w-3/4" />
            <div className="h-4 bg-muted rounded animate-pulse w-5/6" />
          </div>
        </CardContent>
      </Card>
    );
  }

  if (!forecast) {
    return (
      <Card className="shadow-sm border-2 border-primary/20">
        <CardHeader className="pb-4">
          <div className="flex items-center gap-2">
            <Sparkles className="w-6 h-6 text-primary" />
            <CardTitle className="text-xl font-heading">AI Wellness Forecast</CardTitle>
          </div>
          <CardDescription>
            Connect your Ultrahuman device to get personalized AI-powered wellness insights
          </CardDescription>
        </CardHeader>
        <CardContent>
          <p className="text-sm text-muted-foreground">
            No forecast available yet. Sync your health data to receive personalized predictions.
          </p>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="shadow-sm border-2 border-primary/20 bg-gradient-to-br from-primary/5 via-transparent to-transparent">
      <CardHeader className="pb-4">
        <div className="flex items-start justify-between gap-2 flex-wrap">
          <div className="flex items-center gap-2">
            <Sparkles className="w-6 h-6 text-primary" />
            <CardTitle className="text-xl font-heading" data-testid="text-forecast-title">
              AI Wellness Forecast
            </CardTitle>
          </div>
          <Badge variant="secondary" className="text-xs">
            Generated by AI
          </Badge>
        </div>
        <CardDescription>
          Personalized insights based on your recent health metrics
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <p className="text-base leading-relaxed" data-testid="text-forecast-content">
          {forecast.forecast}
        </p>
        
        {forecast.recommendations && Array.isArray(forecast.recommendations) && (
          <div className="space-y-2">
            <h4 className="text-sm font-medium text-muted-foreground">Recommendations</h4>
            <ul className="space-y-1">
              {forecast.recommendations.slice(0, 3).map((rec: string, idx: number) => (
                <li key={idx} className="flex items-start gap-2 text-sm">
                  <TrendingUp className="w-4 h-4 text-primary mt-0.5 flex-shrink-0" />
                  <span>{rec}</span>
                </li>
              ))}
            </ul>
          </div>
        )}

        <p className="text-xs text-muted-foreground">
          Updated {new Date(forecast.generatedAt).toLocaleString()}
        </p>
      </CardContent>
    </Card>
  );
}
